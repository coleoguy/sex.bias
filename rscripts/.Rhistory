# Create vector for initial frequency of the A allele
prob <- c(0.1, 0.3, 0.5, 0.7, 1)
# create vector for number of generations to simulate
gen <- c(5, 50, 100)
# create vector for number of iterations per combination
reps <- c(25, 50)
# store results
wfmodel.results <- data.frame()
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# probability of fixing the A allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = c(reps), N = rep(N, reps),
generations = rep(g, reps),
prob.t = rep(p, reps), p = p)
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# probability of fixing the A allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t = rep(p, reps), p = p)
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
library(ggplot2)
library(ggraptR)
# Create vector for population size
pop <- c(10, 100, 300, 500, 1000)
# Create vector for initial frequency of the A allele
prob <- c(0.1, 0.3, 0.5, 0.7, 1)
# create vector for number of generations to simulate
gen <- c(5, 50, 100)
# create vector for number of iterations per combination
reps <- 50
# store results
wfmodel.results <- data.frame()
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# probability of fixing the A allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = 1:reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t = rep(p, reps), p = p)
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
ggraptR(wfmodel.results)
p <- ggplot(wfmodel.results, aes(x = generations, y = p, group = replicate)) +
geom_path(alpha = .5) + facet_grid(N ~ prob.t) + guides(colour=FALSE)
View(wfmodel.results)
View(wfmodel.results)
prob.t0 <- p
View(prob.t0)
#store probability in t+1 in prob.t0
prob.t0 <- p
library(ggplot2)
library(ggraptR)
# Create vector for population size
pop <- c(10, 100, 300, 500, 1000)
# Create vector for initial frequency of the A allele
prob <- c(0.1, 0.3, 0.5, 0.7, 1)
# create vector for number of generations to simulate
gen <- c(5, 50, 100)
# create vector for number of iterations per combination
reps <- 50
# store results
wfmodel.results <- data.frame()
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t0
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the
# preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# calculate the probability of fixing the A allele.
# 1- p would be the freq. of the a allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = 1:reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t = rep(p, reps), p = p)
#add the results of every iteration and bind them onto the same data frame by row
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
ggraptR(wfmodel.results)
p <- ggplot(wfmodel.results, aes(x = generations, y = p, group = replicate)) +
geom_path(alpha = .5) + facet_grid(N ~ prob.t) + guides(colour=FALSE)
library(ggplot2)
library(ggraptR)
# Create vector for population size
pop <- c(10, 100, 300, 500, 1000)
# Create vector for initial frequency of the A allele
prob <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
# create vector for number of generations to simulate
gen <- c(5, 50, 100)
# create vector for number of iterations per combination
reps <- 50
# store results
wfmodel.results <- data.frame()
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t0
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the
# preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# calculate the probability of fixing the A allele.
# 1- p would be the freq. of the a allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = 1:reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t = rep(p, reps), p = p)
#add the results of every iteration and bind them onto the same data frame by row
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
View(wfmodel.results)
library(ggplot2)
library(ggraptR)
# Create vector for population size
pop <- c(10, 100, 300, 500, 1000)
# Create vector for initial frequency of the A allele
prob <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
# create vector for number of generations to simulate
gen <- c(5, 50, 100)
# create vector for number of iterations per combination
reps <- 50
# store results
wfmodel.results <- data.frame()
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t0
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the
# preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# calculate the probability of fixing the A allele.
# 1- p would be the freq. of the a allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = 1:reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t = rep(p, reps))
#add the results of every iteration and bind them onto the same data frame by row
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
View(wfmodel.results)
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t0
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the
# preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# calculate the probability of fixing the A allele.
# 1- p would be the freq. of the a allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = 1:reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t = rep(p, reps), p = p)
#add the results of every iteration and bind them onto the same data frame by row
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
library(ggplot2)
library(ggraptR)
# Create vector for population size
pop <- c(10, 100, 300, 500, 1000)
# Create vector for initial frequency of the A allele
prob <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
# create vector for number of generations to simulate
gen <- c(5, 50, 100)
# create vector for number of iterations per combination
reps <- 50
# store results
wfmodel.results <- data.frame()
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t0
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the
# preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# calculate the probability of fixing the A allele.
# 1- p would be the freq. of the a allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = 1:reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t = rep(p, reps), p = p)
#add the results of every iteration and bind them onto the same data frame by row
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
View(wfmodel.results)
library(ggplot2)
library(ggraptR)
# Create vector for population size
pop <- c(10, 100, 300, 500, 1000)
# Create vector for initial frequency of the A allele
prob <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
# create vector for number of generations to simulate
gen <- c(5, 50, 100)
# create vector for number of iterations per combination
reps <- 50
# store results
wfmodel.results <- data.frame()
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t0
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the
# preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# calculate the probability of fixing the A allele.
# 1- p would be the freq. of the a allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = 1:reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t = rep(p, reps), p = prob)
#add the results of every iteration and bind them onto the same data frame by row
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
View(wfmodel.results)
library(ggplot2)
library(ggraptR)
# Create vector for population size
pop <- c(10, 100, 300, 500, 1000)
# Create vector for initial frequency of the A allele
prob <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
# create vector for number of generations to simulate
gen <- c(5, 50, 100)
# create vector for number of iterations per combination
reps <- 50
# store results
wfmodel.results <- data.frame()
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t0
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the
# preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# calculate the probability of fixing the A allele.
# 1- p would be the freq. of the a allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = 1:reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t = rep(p, reps))
#add the results of every iteration and bind them onto the same data frame by row
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
View(wfmodel.results)
library(ggplot2)
library(ggraptR)
# Create vector for population size
pop <- c(10, 100, 300, 500, 1000)
# Create vector for initial frequency of the A allele
prob <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
# create vector for number of generations to simulate
gen <- c(5, 50, 100)
# create vector for number of iterations per combination
reps <- 50
# store results
wfmodel.results <- data.frame()
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t0
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the
# preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# calculate the probability of fixing the A allele.
# 1- p would be the freq. of the a allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = 1:reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t = rep(p, reps), p = p)
#add the results of every iteration and bind them onto the same data frame by row
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
View(wfmodel.results)
library(ggplot2)
library(ggraptR)
# Create vector for population size
pop <- c(10, 100, 300, 500, 1000)
# Create vector for initial frequency of the A allele
prob <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
# create vector for number of generations to simulate
gen <- c(5, 50, 100)
# create vector for number of iterations per combination
reps <- 50
# store results
wfmodel.results <- data.frame()
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t0
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the
# preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# calculate the probability of fixing the A allele.
# 1- p would be the freq. of the a allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = 1:reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t = rep(p, reps))
#add the results of every iteration and bind them onto the same data frame by row
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
View(wfmodel.results)
library(ggplot2)
library(ggraptR)
# Create vector for population size
pop <- c(10, 100, 300, 500, 1000)
# Create vector for initial frequency of the A allele
prob <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
# create vector for number of generations to simulate
gen <- c(5, 50, 100)
# create vector for number of iterations per combination
reps <- 50
# store results
wfmodel.results <- data.frame()
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t0
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the
# preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# calculate the probability of fixing the A allele.
# 1- p would be the freq. of the a allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = 1:reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t1 = rep(p, reps), probt0 = p)
#add the results of every iteration and bind them onto the same data frame by row
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
View(wfmodel.results)
result <- mean(rbinom(5, 10, 0.05))
result <- mean(rbinom(10, 5 0.05))
result <- mean(rbinom(10, 5, 0.05))
result <- mean(rbinom(10, 5, 0.05))
result <- mean(rbinom(10, 5, 0.05))
result <- mean(rbinom(10, 5, 0.05))
result <- mean(rbinom(10, 5, 0.05))
result <- mean(rbinom(10, 5, 0.05))
result <- mean(rbinom(10, 5, 0.05))
result <- mean(rbinom(10, 5, 0.05))
library(ggplot2)
library(ggraptR)
# Create vector for population size
pop <- c(10, 100, 300, 500, 1000)
# Create vector for initial frequency of the A allele
prob <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
# create vector for number of generations to simulate
gen <- c(5, 50, 100)
# create vector for number of iterations per combination
reps <- 50
# store results
wfmodel.results <- data.frame()
for(N in pop){
for(p in prob){
#store probability in t+1 in prob.t0
prob.t0 <- p
for(g in gen){
# draw from a binomial distribution with prob = to the frequency of the
# preceding generation.
freq.a <- rbinom(reps, 2*N, p)
# calculate the probability of fixing the A allele.
# 1- p would be the freq. of the a allele
p <- freq.a/ (2*N)
# fill data frame one row at a time
# Pop.size (N), generations (g), and probability (p) repeat for the number of
# iterations specified in vector "reps"
row <- data.frame(replicate = 1:reps, N = rep(N, reps),
generations = rep(g, reps),
prob.t1 = rep(p, reps), p = p)
#add the results of every iteration and bind them onto the same data frame by row
wfmodel.results <- rbind(wfmodel.results, row)
}
}
}
View(row)
View(wfmodel.results)
View(wfmodel.results)
setwd("~/Desktop/Dropbox/sex.bias/rscripts")
# load functions
source("functions/analysis.functions.R")
View(getFitness)
1:10
for (a in 1:10) {
}
for (a in 1:10) {
print(a)
}
letters[1:19]
char <- letters[1:19]
for (a in char) {
print(a)
}
for (a in char) {
if(a == d){
print(2)
}
}
for (a in char) {
if(a == "d"){
print(2)
}
}
for (a in char) {
if(a == "d"){
print(2)
}
if(a != "d"){
print(1)
}
}
for (a in char) {
if(a == "d"){
print(2)
}else{
print(5)
}
}

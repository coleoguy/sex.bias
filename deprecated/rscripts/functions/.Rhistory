comm.sex <- c(100, 50)
osr <- c(.2, .1,.05)
s <- c(0.5, 0.9)
h <- c(0.5, 1.0)
replicates <- 10
max.gens <- 50
i<-j<-k<-m<-1
results <- as.data.frame(matrix(NA,1,6))
colnames(results) <- c("freq0", "OSR", "sex.com", "num.com", "h", "s")
# here we calculate number of males and females in the pop
females <- comm.sex[i]
males <- round(comm.sex[i]*osr[j])
# here we calculate the total number of chromosomes
chroms <- 2 * males + 2 * females
# how many cores to run on
registerDoMC(6)
# sets up the initial population
pop <- GetInitialPop(females, males)
# this flag and counter will allow us to break out of the
# while loop if an allele fixes or we have run as long
# as we want to allow it to run
segregating <- T
counter <- 1
# one generation of selection
pop <- Generation(pop, s=s[k], h=h[m], females, males)
pop
# calculate the frequency of 0 allele
fre <- GetFreq(pop,allele=0,males,females)
GetFreq(pop,allele=0,males,females)
allele=0
# calculate the frequency of 0 allele
fre <- GetFreq(pop,allele=0,males,females)
GetFreq <- function(pop, allele, males, females){
zeros <- (pop[1]*2 + pop[2] + pop[3] +
pop[5]*2 + pop[6] + pop[7]) / (2 * sum(pop))
if(allele == 0) return(zeros)
if(allele == 1) return(1 - zeros)
}
# calculate the frequency of 0 allele
fre <- GetFreq(pop,allele=0,males,females)
x <- foreach (iter = 1:replicates, .combine = "c") %dopar% {
# sets up the initial population
pop <- GetInitialPop(females, males)
# this flag and counter will allow us to break out of the
# while loop if an allele fixes or we have run as long
# as we want to allow it to run
segregating <- T
counter <- 1
while(segregating){
# one generation of selection
pop <- Generation(pop, s=s[k], h=h[m], females, males)
# calculate the frequency of 0 allele
fre <- GetFreq(pop,allele=0,males,females)
# test whether we have met stopping conditions
if(fre == 0 | fre == 1 | counter == max.gens){
segregating <- F
}
counter <- counter + 1
}
fre
}
x
rep(osr[j], length(x))
rep(s[k], length(x))
rep(h[m], length(x))
rep(comm.sex[i], length(x))
rep(sex.com, length(x))
# x = results from one setting
if(males > females) sex.com <- "male"
if(males < females) sex.com <- "female"
if(males == females) sex.com <- "equal"
rep(sex.com, length(x))
x
data.frame(x,
rep(osr[j], length(x)),
rep(sex.com, length(x)),
rep(comm.sex[i], length(x)),
rep(h[m], length(x)),
rep(s[k], length(x)))
data.frame(x,
rep(osr[j], length(x)),
rep(sex.com, length(x)),
rep(comm.sex[i], length(x)),
rep(h[m], length(x)),
rep(s[k], length(x)))->foo
View(foo)
colnames(temp.result) <- colnames(results)
temp.result <- data.frame(x,
rep(osr[j], length(x)),
rep(sex.com, length(x)),
rep(comm.sex[i], length(x)),
rep(h[m], length(x)),
rep(s[k], length(x)))
colnames(temp.result) <- colnames(results)
View(temp.result)
View(results)
results <- as.data.frame(matrix(NA,0,6))
colnames(results) <- c("freq0", "OSR", "sex.com", "num.com", "h", "s")
View(results)
library(doMC)
source("../functions/functions.esd.R")
comm.sex <- c(100, 50)
osr <- c(.2, .1,.05)
s <- c(0.5, 0.9)
h <- c(0.5, 1.0)
replicates <- 10
max.gens <- 50
results <- as.data.frame(matrix(NA,0,6))
colnames(results) <- c("freq0", "OSR", "sex.com", "num.com", "h", "s")
# these nested loops will test each scenario pairing different
# these nested loops will test each scenario pairing different
# parameters as appropriate
for(i in 1:length(comm.sex)){
# just prints to let us know progress
print(paste("working on common sex =", comm.sex[i]))
for(j in 1:length(osr)){
# here we calculate number of males and females in the pop
females <- comm.sex[i]
males <- round(comm.sex[i]*osr[j])
# here we calculate the total number of chromosomes
chroms <- 2 * males + 2 * females
for(k in 1:length(s)){
for(m in 1:length(h)){
# how many cores to run on
registerDoMC(6)
x <- foreach (iter = 1:replicates, .combine = "c") %dopar% {
# sets up the initial population
pop <- GetInitialPop(females, males)
# this flag and counter will allow us to break out of the
# while loop if an allele fixes or we have run as long
# as we want to allow it to run
segregating <- T
counter <- 1
while(segregating){
# one generation of selection
pop <- Generation(pop, s=s[k], h=h[m], females, males)
# calculate the frequency of 0 allele
fre <- GetFreq(pop,allele=0,males,females)
# test whether we have met stopping conditions
if(fre == 0 | fre == 1 | counter == max.gens){
segregating <- F
}
counter <- counter + 1
}
fre
}
# x = results from one setting
if(males > females) sex.com <- "male"
if(males < females) sex.com <- "female"
if(males == females) sex.com <- "equal"
temp.result <- data.frame(x,
rep(osr[j], length(x)),
rep(sex.com, length(x)),
rep(comm.sex[i], length(x)),
rep(h[m], length(x)),
rep(s[k], length(x)))
colnames(temp.result) <- colnames(results)
results <- rbind(results, temp.results)
}
}
}
}
source("../functions/functions.esd.R")
comm.sex <- c(100, 50)
osr <- c(.2, .1,.05)
s <- c(0.5, 0.9)
h <- c(0.5, 1.0)
replicates <- 10
max.gens <- 50
#i<-j<-k<-m<-1
results <- as.data.frame(matrix(NA,0,6))
colnames(results) <- c("freq0", "OSR", "sex.com", "num.com", "h", "s")
# these nested loops will test each scenario pairing different
# parameters as appropriate
for(i in 1:length(comm.sex)){
# just prints to let us know progress
print(paste("working on common sex =", comm.sex[i]))
for(j in 1:length(osr)){
# here we calculate number of males and females in the pop
females <- comm.sex[i]
males <- round(comm.sex[i]*osr[j])
# here we calculate the total number of chromosomes
chroms <- 2 * males + 2 * females
for(k in 1:length(s)){
for(m in 1:length(h)){
# how many cores to run on
registerDoMC(6)
x <- foreach (iter = 1:replicates, .combine = "c") %dopar% {
# sets up the initial population
pop <- GetInitialPop(females, males)
# this flag and counter will allow us to break out of the
# while loop if an allele fixes or we have run as long
# as we want to allow it to run
segregating <- T
counter <- 1
while(segregating){
# one generation of selection
pop <- Generation(pop, s=s[k], h=h[m], females, males)
# calculate the frequency of 0 allele
fre <- GetFreq(pop,allele=0,males,females)
# test whether we have met stopping conditions
if(fre == 0 | fre == 1 | counter == max.gens){
segregating <- F
}
counter <- counter + 1
}
fre
}
# x = results from one setting
if(males > females) sex.com <- "male"
if(males < females) sex.com <- "female"
if(males == females) sex.com <- "equal"
temp.result <- data.frame(x,
rep(osr[j], length(x)),
rep(sex.com, length(x)),
rep(comm.sex[i], length(x)),
rep(h[m], length(x)),
rep(s[k], length(x)))
colnames(temp.result) <- colnames(results)
results <- rbind(results, temp.result)
}
}
}
}
View(results)
library(ggraptR)
ggraptR(results)
library(doMC)
source("../functions/functions.esd.R")
# simulations for rare males
# allele 0 good for females
# allele 1 good for males
# pop = list of two vectors containing genotype counts
# s = selection coefficient
# h = dominance coefficient for 0 allele
# repeat
comm.sex <- c(1000, 500, 100, 50)
osr <- c(1, .8, .6, .4, .2, .1,.05)
s <- c(0.1, 0.2, 0.5, 0.9)
h <- c(0.0, 0.5, 1.0)
replicates <- 1000
max.gens <- 500
results <- as.data.frame(matrix(NA,0,6))
colnames(results) <- c("freq0", "OSR", "sex.com", "num.com", "h", "s")
# these nested loops will test each scenario pairing different
# parameters as appropriate
for(i in 1:length(comm.sex)){
# just prints to let us know progress
print(paste("working on common sex =", comm.sex[i]))
for(j in 1:length(osr)){
# here we calculate number of males and females in the pop
females <- comm.sex[i]
males <- round(comm.sex[i]*osr[j])
# here we calculate the total number of chromosomes
chroms <- 2 * males + 2 * females
for(k in 1:length(s)){
for(m in 1:length(h)){
# how many cores to run on
registerDoMC(6)
x <- foreach (iter = 1:replicates, .combine = "c") %dopar% {
# sets up the initial population
pop <- GetInitialPop(females, males)
# this flag and counter will allow us to break out of the
# while loop if an allele fixes or we have run as long
# as we want to allow it to run
segregating <- T
counter <- 1
while(segregating){
# one generation of selection
pop <- Generation(pop, s=s[k], h=h[m], females, males)
# calculate the frequency of 0 allele
fre <- GetFreq(pop,allele=0,males,females)
# test whether we have met stopping conditions
if(fre == 0 | fre == 1 | counter == max.gens){
segregating <- F
}
counter <- counter + 1
}
fre
}
# x = results from one setting
if(males > females) sex.com <- "male"
if(males < females) sex.com <- "female"
if(males == females) sex.com <- "equal"
temp.result <- data.frame(x,
rep(osr[j], length(x)),
rep(sex.com, length(x)),
rep(comm.sex[i], length(x)),
rep(h[m], length(x)),
rep(s[k], length(x)))
colnames(temp.result) <- colnames(results)
results <- rbind(results, temp.result)
}
}
}
}
library(doMC)
source("../functions/functions.esd.R")
# simulations for rare males
# allele 0 good for females
# allele 1 good for males
# pop = list of two vectors containing genotype counts
# s = selection coefficient
# h = dominance coefficient for 0 allele
# repeat
comm.sex <- c(1000, 500, 100, 50)
osr <- c(1, .8, .6, .4, .2, .1,.05)
s <- c(0.1, 0.2, 0.5, 0.9)
h <- c(0.0, 0.5, 1.0)
replicates <- 10
max.gens <- 100
results <- as.data.frame(matrix(NA,0,6))
colnames(results) <- c("freq0", "OSR", "sex.com", "num.com", "h", "s")
# these nested loops will test each scenario pairing different
# parameters as appropriate
for(i in 1:length(comm.sex)){
# just prints to let us know progress
print(paste("working on common sex =", comm.sex[i]))
for(j in 1:length(osr)){
# here we calculate number of males and females in the pop
females <- comm.sex[i]
males <- round(comm.sex[i]*osr[j])
# here we calculate the total number of chromosomes
chroms <- 2 * males + 2 * females
for(k in 1:length(s)){
for(m in 1:length(h)){
# how many cores to run on
registerDoMC(6)
x <- foreach (iter = 1:replicates, .combine = "c") %dopar% {
# sets up the initial population
pop <- GetInitialPop(females, males)
# this flag and counter will allow us to break out of the
# while loop if an allele fixes or we have run as long
# as we want to allow it to run
segregating <- T
counter <- 1
while(segregating){
# one generation of selection
pop <- Generation(pop, s=s[k], h=h[m], females, males)
# calculate the frequency of 0 allele
old.fre <- fre
fre <- GetFreq(pop,allele=0,males,females)
# test whether we have met stopping conditions
if(fre == 0 | fre == 1 | counter == max.gens | round(old.fre, digits=5) == round(fre, digits=5)){
segregating <- F
}
counter <- counter + 1
}
fre
}
# x = results from one setting
if(males > females) sex.com <- "male"
if(males < females) sex.com <- "female"
if(males == females) sex.com <- "equal"
temp.result <- data.frame(x,
rep(osr[j], length(x)),
rep(sex.com, length(x)),
rep(comm.sex[i], length(x)),
rep(h[m], length(x)),
rep(s[k], length(x)))
colnames(temp.result) <- colnames(results)
results <- rbind(results, temp.result)
}
}
}
}
library(doMC)
source("../functions/functions.esd.R")
# simulations for rare males
# allele 0 good for females
# allele 1 good for males
# pop = list of two vectors containing genotype counts
# s = selection coefficient
# h = dominance coefficient for 0 allele
# repeat
comm.sex <- c(1000, 500, 100, 50)
osr <- c(1, .8, .6, .4, .2, .1,.05)
s <- c(0.1, 0.2, 0.5, 0.9)
h <- c(0.0, 0.5, 1.0)
replicates <- 10
max.gens <- 100
results <- as.data.frame(matrix(NA,0,6))
colnames(results) <- c("freq0", "OSR", "sex.com", "num.com", "h", "s")
# these nested loops will test each scenario pairing different
# parameters as appropriate
for(i in 1:length(comm.sex)){
# just prints to let us know progress
print(paste("working on common sex =", comm.sex[i]))
for(j in 1:length(osr)){
# here we calculate number of males and females in the pop
females <- comm.sex[i]
males <- round(comm.sex[i]*osr[j])
# here we calculate the total number of chromosomes
chroms <- 2 * males + 2 * females
for(k in 1:length(s)){
for(m in 1:length(h)){
# how many cores to run on
registerDoMC(6)
x <- foreach (iter = 1:replicates, .combine = "c") %dopar% {
# sets up the initial population
pop <- GetInitialPop(females, males)
fre <- GetFreq(pop,allele=0,males,females)
# this flag and counter will allow us to break out of the
# while loop if an allele fixes or we have run as long
# as we want to allow it to run
segregating <- T
counter <- 1
while(segregating){
# one generation of selection
pop <- Generation(pop, s=s[k], h=h[m], females, males)
# calculate the frequency of 0 allele
old.fre <- fre
fre <- GetFreq(pop,allele=0,males,females)
# test whether we have met stopping conditions
if(fre == 0 | fre == 1 | counter == max.gens | round(old.fre, digits=5) == round(fre, digits=5)){
segregating <- F
}
counter <- counter + 1
}
fre
}
# x = results from one setting
if(males > females) sex.com <- "male"
if(males < females) sex.com <- "female"
if(males == females) sex.com <- "equal"
temp.result <- data.frame(x,
rep(osr[j], length(x)),
rep(sex.com, length(x)),
rep(comm.sex[i], length(x)),
rep(h[m], length(x)),
rep(s[k], length(x)))
colnames(temp.result) <- colnames(results)
results <- rbind(results, temp.result)
}
}
}
}
View(results)
ggraptR(results)
View(results)
ggraptR(results)
library(doMC)
source("../functions/functions.esd.R")
# repeat
comm.sex <- c(1000, 500, 100, 50)
osr <- c(1, .8, .6, .4, .2, .1,.05)
s <- c(0.1, 0.2, 0.5, 0.9)
h <- c(0.0, 0.5, 1.0)
replicates <- 1000
max.gens <- 100
results <- as.data.frame(matrix(NA,0,6))
colnames(results) <- c("freq0", "OSR", "sex.com", "num.com", "h", "s")
# these nested loops will test each scenario pairing different
# parameters as appropriate
for(i in 1:length(comm.sex)){
# just prints to let us know progress
print(paste("working on common sex =", comm.sex[i]))
for(j in 1:length(osr)){
# here we calculate number of males and females in the pop
females <- comm.sex[i]
males <- round(comm.sex[i]*osr[j])
# here we calculate the total number of chromosomes
chroms <- 2 * males + 2 * females
for(k in 1:length(s)){
for(m in 1:length(h)){
# how many cores to run on
registerDoMC(5)
x <- foreach (iter = 1:replicates, .combine = "c") %dopar% {
# sets up the initial population
pop <- GetInitialPop(females, males)
fre <- GetFreq(pop,allele=0,males,females)
# this flag and counter will allow us to break out of the
# while loop if an allele fixes or we have run as long
# as we want to allow it to run
segregating <- T
counter <- 1
while(segregating){
# one generation of selection
pop <- Generation(pop, s=s[k], h=h[m], females, males)
# calculate the frequency of 0 allele
old.fre <- fre
fre <- GetFreq(pop,allele=0,males,females)
# test whether we have met stopping conditions
if(fre == 0 | fre == 1 | counter == max.gens | round(old.fre, digits=5) == round(fre, digits=5)){
segregating <- F
}
counter <- counter + 1
}
fre
}
# x = results from one setting
if(males > females) sex.com <- "male"
if(males < females) sex.com <- "female"
if(males == females) sex.com <- "equal"
temp.result <- data.frame(x,
rep(osr[j], length(x)),
rep(sex.com, length(x)),
rep(comm.sex[i], length(x)),
rep(h[m], length(x)),
rep(s[k], length(x)))
colnames(temp.result) <- colnames(results)
results <- rbind(results, temp.result)
}
}
}
}
ls()
ggraptR(results)
ls()
ls()[-59]
rm(list=ls()[-59])
save.image("~/Desktop/Dropbox/projects/sex.bias/rscripts/results/esd.RData")

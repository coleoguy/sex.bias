setwd("~/Desktop/Dropbox/projects/sex.bias/rscripts")
# Script to generate relative fitness tables without manual change of parameters
# inside the loop. This script looks at the difference in relative fitness between males
# and females as a function of sexually antagonistic variation on autosomes.
# Julio Rincones-Gamboa
# j.a.r.gamboa@gmail.com
# jgamboa@bio.tamu.edu
# load functions
source("../analysis/functions.R")
# Script to generate relative fitness tables without manual change of parameters
# inside the loop. This script looks at the difference in relative fitness between males
# and females as a function of sexually antagonistic variation on autosomes.
# Julio Rincones-Gamboa
# j.a.r.gamboa@gmail.com
# jgamboa@bio.tamu.edu
# load functions
source("../rscripts/analysis/functions.R")
setwd("~/Desktop/Dropbox/projects/sex.bias/rscripts/results")
# Script to generate relative fitness tables without manual change of parameters
# inside the loop. This script looks at the difference in relative fitness between males
# and females as a function of sexually antagonistic variation on autosomes.
# Julio Rincones-Gamboa
# j.a.r.gamboa@gmail.com
# jgamboa@bio.tamu.edu
# load functions
source("../rscripts/analysis/functions.R")
load("base.comp.model.RData")
setwd("~/Desktop/Dropbox/projects/sex.bias/rscripts/results")
# Script to generate relative fitness tables without manual change of parameters
# inside the loop. This script looks at the difference in relative fitness between males
# and females as a function of sexually antagonistic variation on autosomes.
# Julio Rincones-Gamboa
# j.a.r.gamboa@gmail.com
# jgamboa@bio.tamu.edu
# load functions
source("../../rscripts/analysis/functions.R")
# Script to generate relative fitness tables without manual change of parameters
# inside the loop. This script looks at the difference in relative fitness between males
# and females as a function of sexually antagonistic variation on autosomes.
# Julio Rincones-Gamboa
# j.a.r.gamboa@gmail.com
# jgamboa@bio.tamu.edu
# load functions
source("../../rscripts/analysis/analysis.functions.R")
# Script to generate relative fitness tables without manual change of parameters
# inside the loop. This script looks at the difference in relative fitness between males
# and females as a function of sexually antagonistic variation on autosomes.
# Julio Rincones-Gamboa
# j.a.r.gamboa@gmail.com
# jgamboa@bio.tamu.edu
# load functions
source("../../rscripts/analyses/functions.R")
load("base.comp.model.RData")
res.base <- results
load("rare.female.model.RData")
res.rare.fem <- results
rm(results)
results.fit <- matrix(, 4, 4)
# insert column and row names
colnames(results.fit) <- c("50", "100",
"500", "1000")
rownames(results.fit)<- c("OSR1.h0", "OSR1.h.5", "OSR1.h1", "OSR1.h99")
# providing the formals for the getFitness function
loc <- "auto"
h <- c(0, .5, 1, .99)
s <- .5
i <- j <- k <- 1
which(names(res.base[[i]][[j]][[k]]) == "s0.5")
s.coeff <- which(names(res.base[[i]][[j]][[k]]) == "s0.5")
j <- 4
res.base[[i]][[j]][[k]][[s.coeff]]
# Script to generate relative fitness tables without manual change of parameters
# inside the loop. This script looks at the difference in relative fitness between males
# and females as a function of sexually antagonistic variation on autosomes.
# Julio Rincones-Gamboa
# j.a.r.gamboa@gmail.com
# jgamboa@bio.tamu.edu
# load functions
source("functions/analysis.functions.R")
load("base.comp.model.RData")
res.base <- results
load("rare.female.model.RData")
res.rare.fem <- results
rm(results)
# create matrix for results
results.fit <- matrix(, 4, 4)
# insert column and row names
colnames(results.fit) <- c("50", "100",
"500", "1000")
rownames(results.fit)<- c("OSR1.h0", "OSR1.h.5", "OSR1.h1", "OSR1.h99")
# providing the formals for the getFitness function
loc <- "auto"
h <- c(0, .5, 1, .99)
s <- .5
i <- j <- k <- 1
# Script to generate relative fitness tables without manual change of parameters
# inside the loop. This script looks at the difference in relative fitness between males
# and females as a function of sexually antagonistic variation on autosomes.
# Julio Rincones-Gamboa
# j.a.r.gamboa@gmail.com
# jgamboa@bio.tamu.edu
# load functions
source("functions/analysis.functions.R")
# Script to generate relative fitness tables without manual change of parameters
# inside the loop. This script looks at the difference in relative fitness between males
# and females as a function of sexually antagonistic variation on autosomes.
# Julio Rincones-Gamboa
# j.a.r.gamboa@gmail.com
# jgamboa@bio.tamu.edu
# load functions
source("../functions/analysis.functions.R")
View(results.fit)
j <- 4
s.coeff <- which(names(res.base[[i]][[j]][[k]]) == "s0.5")
res.base[[i]][[j]][[k]][[s.coeff]]
getFitness(data = res.base[[i]][[j]][[k]][[s.coeff]], loc, h[k], s)
getDifference.mal(fit)
fit <- getFitness(data = res.base[[i]][[j]][[k]][[s.coeff]], loc, h[k], s)
getDifference.mal(fit)
# cycle through population sizes (50, 100, 500, 1000)
for(i in 1:4){
# pull results when rd = 0.5 only
for(j in 1:4){
if(names(res.base[[i]])[j] == "rd0.5"){
# cycle through genetic architectures but only when s = 0.5
for(k in 1:4){
s.coeff <- which(names(res.base[[i]][[j]][[k]]) == "s0.5")
fit <- getFitness(data = res.base[[i]][[j]][[k]][[s.coeff]], loc, h[k], s)
results.fit[k, i] <- getDifference.mal(fit)
}
}
}
}
View(results.fit)
getFitness()
getFitness
# Script to generate relative fitness tables without manual change of parameters
# inside the loop. This script looks at the difference in relative fitness between males
# and females as a function of sexually antagonistic variation on sex chromosomes.
# Julio Rincones-Gamboa
# j.a.r.gamboa@gmail.com
# jgamboa@bio.tamu.edu
# load functions
source("../functions/analysis.functions.R")
load("base.comp.model.RData")
res.base <- results
load("rare.female.model.RData")
res.rare.fem <- results
load("rare.male.model.RData")
res.rare.mal <- results
rm(results)
# providing the formals for the getFitness function
loc <- "sex"
# providing the formals for the getFitness function
loc <- "sex"
h <- c(0, .5, 1, 99)
s <- .5
results.fit <- matrix(, 4, 4)
# insert column and row names
colnames(results.fit) <- c("50", "100",
"500", "1000")
rownames(results.fit)<- c("OSR1.h0", "OSR1.h.5", "OSR1.h1", "OSR1.h99")
# Sexually antagonistic loci evaluation on sex chromosomes
# cycle through population sizes (50, 100, 500, 1000)
for(i in 1:4){
# pull results when rd = 0.1 only
for(j in 1:4){
if(names(res.base[[i]])[j] == "rd0.1"){
# cycle through genetic architectures but only when s = 0.5
for(k in 1:4){
s.coeff <- which(names(res.base[[i]][[j]][[k]]) == "s0.5")
fit <- getFitness(data = res.base[[i]][[j]][[k]][[s.coeff]], loc, h[k], s)
results.fit[k, i] <- getDifference.mal(fit)
}
}
}
}
View(results.fit)
# h = 0
results.fit.biash0 <- matrix(, 6, 4)
colnames(results.fit.biash0) <- c("50", "100",
"500", "1000")
rownames(results.fit.biash0) <- c("OSR.8.h0", "OSR.6.h0", "OSR.4.h0", "OSR.2.h0", "OSR.1.h0", "OSR.05.h0")
# h = 0.5
results.fit.biash0.5 <- matrix(, 6, 4)
colnames(results.fit.biash0.5) <- c("50", "100",
"500", "1000")
rownames(results.fit.biash0.5) <- c("OSR.8.h.5", "OSR.6.h.5", "OSR.4.h.5", "OSR.2.h.5", "OSR.1.h.5", "OSR.05.h.5")
# h = 1
results.fit.biash1 <- matrix(, 6, 4)
colnames(results.fit.biash1) <- c("50", "100",
"500", "1000")
rownames(results.fit.biash1) <- c("OSR.8.h1", "OSR.6.h1", "OSR.4.h1", "OSR.2.h1", "OSR.1.h1", "OSR.05.h1")
# h =  .99
results.fit.biash99 <- matrix(, 6, 4)
colnames(results.fit.biash99) <- c("50", "100",
"500", "1000")
rownames(results.fit.biash99) <- c("OSR.8.h99", "OSR.6.h99", "OSR.4.h99", "OSR.2.h99", "OSR.1.h99", "OSR.05.h99")
# Evaluation of exually antagonistic loci on sex  chromosomes when there is bias
# structure of results is as follows: res.rare.fem$males50$females0.8$rd0.1$h0$s0.5 (loop will start iterating in this
# order in the case of sex chromosomes.)
# cycle through population sizes (50, 100, 500, 1000)
for(i in 1:4){
# cycle through OSR bias in this order: 0.8, 0.6, 0.4, 0.2, 0.1, 0.05
for(j in 1:6){
# pull results when rd = 0.1 only
for(k in 1:4){
if(names(res.rare.fem[[i]][[j]])[k] == "rd0.1"){
# cycle through genetic architectures. The selection coefficient is hard coded. If you want to choose a different
# coefficient you need to change '$s0.5' to any of the values we have used for the simulations(0.1, 0.2, 0.5, 0.9).
for(m in 1:4){
if(m == 1){
for(n in 1:4){
fit <- getFitness(data = res.rare.fem[[i]][[j]][[k]][[m]]$s0.5, loc, h[m], s)
results.fit.biash0[j, i] <- getDifference.mal(fit)
}
}
if(m == 2){
for(n in 1:4){
fit <- getFitness(data = res.rare.fem[[i]][[j]][[k]][[m]]$s0.5, loc, h[m], s)
results.fit.biash0.5[j, i] <- getDifference.mal(fit)
}
}
if(m == 3){
for(n in 1:4){
fit <- getFitness(data = res.rare.fem[[i]][[j]][[k]][[m]]$s0.5, loc, h[m], s)
results.fit.biash1[j, i] <- getDifference.mal(fit)
}
}
if(m == 4){
for(n in 1:4){
fit <- getFitness(data = res.rare.fem[[i]][[j]][[k]][[m]]$s0.5, loc, h[m], s)
results.fit.biash99[j, i] <- getDifference.mal(fit)
}
}
}
}
}
}
}
View(results.fit.biash0.5)
h[2]
s
loc
j <-6
getDifference.mal
source("../functions/analysis.functions.R")
load("base.comp.model.RData")
res.base <- results
load("rare.female.model.RData")
res.rare.fem <- results
rm(results)
# create matrix for results
results.fit <- matrix(, 4, 4)
# insert column and row names
colnames(results.fit) <- c("50", "100",
"500", "1000")
rownames(results.fit)<- c("OSR1.h0", "OSR1.h.5", "OSR1.h1", "OSR1.h99")
# providing the formals for the getFitness function
loc <- "auto"
h <- c(0, .5, 1, .99)
s <- .5
i <- j <- k <- 1
# Autosomal loci evaluation
# cycle through population sizes (50, 100, 500, 1000)
for(i in 1:4){
# pull results when rd = 0.5 only
for(j in 1:4){
if(names(res.base[[i]])[j] == "rd0.5"){
# cycle through genetic architectures but only when s = 0.5
for(k in 1:4){
s.coeff <- which(names(res.base[[i]][[j]][[k]]) == "s0.5")
fit <- getFitness(data = res.base[[i]][[j]][[k]][[s.coeff]], loc, h[k], s)
results.fit[k, i] <- getDifference.mal(fit)
}
}
}
}
# create matrix for results
results.fit.biash0 <- matrix(, 6, 4)
# insert column and row names
colnames(results.fit.biash0) <- c("50", "100",
"500", "1000")
rownames(results.fit.biash0) <- c("OSR.8.h0", "OSR.6.h0", "OSR.4.h0", "OSR.2.h0", "OSR.1.h0", "OSR.05.h0")
# create matrix for results
results.fit.biash0.5 <- matrix(, 6, 4)
# insert column and row names
colnames(results.fit.biash0.5) <- c("50", "100",
"500", "1000")
rownames(results.fit.biash0.5) <- c("OSR.8.h.5", "OSR.6.h.5", "OSR.4.h.5", "OSR.2.h.5", "OSR.1.h.5", "OSR.05.h.5")
# create matrix for results
results.fit.biash1 <- matrix(, 6, 4)
# insert column and row names
colnames(results.fit.biash1) <- c("50", "100",
"500", "1000")
rownames(results.fit.biash1) <- c("OSR.8.h1", "OSR.6.h1", "OSR.4.h1", "OSR.2.h1", "OSR.1.h1", "OSR.05.h1")
# create matrix for results
results.fit.biash99 <- matrix(, 6, 4)
# insert column and row names
colnames(results.fit.biash99) <- c("50", "100",
"500", "1000")
rownames(results.fit.biash99) <- c("OSR.8.h99", "OSR.6.h99", "OSR.4.h99", "OSR.2.h99", "OSR.1.h99", "OSR.05.h99")
# providing the formals for the getFitness function
loc <- "auto"
h <- c(0, .5, 1, .99)
s <- .5
# Autosomal loci evaluation
# structure of results is as follows: res.rare.fem$males50$females0.8$rd0.5$h0$s0.5 (loop will start iterating in this
# order in the case of autosomes.)
# cycle through population sizes (50, 100, 500, 1000)
for(i in 1:4){
# cycle through OSR bias
for(j in 1:6){
# pull results when rd = 0.5 only
for(k in 1:4){
if(names(res.rare.fem[[i]][[j]])[k] == "rd0.5"){
# cycle through genetic architectures but only when s = 0.5
for(m in 1:4){
if(m == 1){
for(n in 1:4){
fit <- getFitness(data = res.rare.fem[[i]][[j]][[k]][[m]]$s0.5, loc, h[m], s)
results.fit.biash0[j, i] <- getDifference.mal(fit)
}
}
if(m == 2){
for(n in 1:4){
fit <- getFitness(data = res.rare.fem[[i]][[j]][[k]][[m]]$s0.5, loc, h[m], s)
results.fit.biash0.5[j, i] <- getDifference.mal(fit)
}
}
if(m == 3){
for(n in 1:4){
fit <- getFitness(data = res.rare.fem[[i]][[j]][[k]][[m]]$s0.5, loc, h[m], s)
results.fit.biash1[j, i] <- getDifference.mal(fit)
}
}
if(m == 4){
for(n in 1:4){
fit <- getFitness(data = res.rare.fem[[i]][[j]][[k]][[m]]$s0.5, loc, h[m], s)
results.fit.biash99[j, i] <- getDifference.mal(fit)
}
}
}
}
}
}
}
View(results.fit.biash0.5)

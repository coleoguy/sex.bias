## obtained for both the treated and untreated cell line and sequenced on Illuminaâ€™s 1G
## genome analyzer. For each sample we were provided with the raw 35 bp RNA-seq reads
## from the authors. For the untreated prostate cancer cells (LNCaP cell line) there were
## 4 lanes totaling 10 million 35 bp reads. For the treated cells there were 3 lanes
## totaling 7 million 35 bp reads. All replicates were technical replicates. Reads were
## mapped to NCBI version 36.3 of the human genome using bowtie. Any read that  mapped to
## multiple locations was discarded. Using the ENSEMBL 54 annotation from biomart, each
## mapped read was associated with an ENSEMBL gene. This was done by associating any read
## that overlapped with any part of the gene (not just the exons) with that gene. Reads
## that did not correspond to genes were discarded."
lncap <- read.table(system.file("extdata", "Li_sum.txt", package='goseq'), sep = '\t',
header = TRUE, stringsAsFactors = FALSE, row.names = 1)
head(lncap)
## The main object class for DESeq2 is DESeqDataSet. This is analogous to edgeR's DGEList.
col_data <- data.frame("Group" = factor(rep(c("Control", "Treatment"), times = c(4, 3))),
row.names = colnames(lncap))
lncap_deseq <- DESeqDataSetFromMatrix(countData = lncap, colData = col_data,
design = ~ Group)
## For exploratory analysis of NGS counts, DESeq2 recommends applying its 'rlog'
## transformation. This is a modified version of a log2 transformation, intended to make
## the features have approximately the same variance. Untransformed read counts have
## variances that increase with the mean. Thus, for example, PCA analysis of the raw
## counts would likely depend almost entirely on the features with the highest counts.
## The rlog function returns an object of class SummarizedExperiment. This is a general
## class for representing -omics data, where the rows correspond to features and the
## columns correspond to samples. We can extract the numeric values for each feature with
## the assay function.
lncap_rld <- rlog(lncap_deseq)
head(assay(lncap_rld))
## For exploratory analysis of NGS counts, DESeq2 recommends applying its 'rlog'
## transformation. This is a modified version of a log2 transformation, intended to make
## the features have approximately the same variance. Untransformed read counts have
## variances that increase with the mean. Thus, for example, PCA analysis of the raw
## counts would likely depend almost entirely on the features with the highest counts.
## The rlog function returns an object of class SummarizedExperiment. This is a general
## class for representing -omics data, where the rows correspond to features and the
## columns correspond to samples. We can extract the numeric values for each feature with
## the assay function.
lncap_rld <- rlog(lncap_deseq)
head(assay(lncap_rld))
## for example, that samples from the same comparison groups are more similar than samples
## from different comparison groups. We can also get insight into any possibly outlying
## samples (perhaps of poor quality). We'll use the heatmap.2 function from the gplots
## package to create a clustering heatmap. We'll use the RColorBrewer package to create
## some fancy colors to use in the heatmap. The dist function computes Euclidean
## distances between the rlog-transformed data. The hclust function does hierarchical
## clustering, given the sample distances.
##
## As expected, the first four control samples (lanes) cluster together, and the last
## three treatment samples cluster together.
biocLite("gplots")
library(gplots)
library(RColorBrewer)
sampleDists <- dist(t(assay(lncap_rld)))
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
hc <- hclust(sampleDists)
heatmap.2(as.matrix(sampleDists), Rowv = as.dendrogram(hc), symm = TRUE, trace = "none",
col = colors, margins = c(2,10), labCol = FALSE)
hc <- hclust(sampleDists)
hc
plot(hc)
plot(hc)
heatmap.2(as.matrix(sampleDists), Rowv = as.dendrogram(hc), symm = TRUE, trace = "none",
col = colors, margins = c(2,10), labCol = FALSE)
library(biomaRt)
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
mart
seq_cdna <- getSequence(id="SPRR4", type = "hgnc_symbol", seqType = "cdna", mart = mart)
seq_pep <- getSequence(id="SPRR4", type = "hgnc_symbol", seqType = "peptide", mart = mart)
show(seq_cdna)
show(seq_pep)
#  ii. What is the Entrez ID for SPRR4?
library(org.Hs.eg.db)
EID <- unlist(mget("SPRR4",  org.Hs.egSYMBOL2EG, ifnotfound = NA))
# Provide GO information for SPRR4
GO <- mget(EID, org.Hs.egGO)
show(GO)
# (b) Consider the human gene with HGNC symbol BRCA1.
# i. Which probeset on the Affymetrix HGU133a Gene Chip microarray corresponds to
# BRCA1?
library("hgu133a.db")
library(KEGG.db)
affy_symbol <- hgu133aSYMBOL
mapped_probes <- mappedkeys(affy_symbol)
affy_symbol <- as.list(affy_symbol[mapped_probes])
affy_symbol[which("BRCA1" == affy_symbol)]
affy_symbol
KEGGPATHID2NAME$"04120"
setwd("~/Julio's PhD projects Dropbox/Julio Gamboa/sex.bias/figures")
library(viridis)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
resultsplot <- read.csv("../../sex.bias/rscripts/parsing/Autosome.rare.male.csv", row.names = 1,
as.is = T, header = T, check.names = F)
resultsplot <- resultsplot[(resultsplot$rd == 0.5),]
resultsplot <- resultsplot[(resultsplot$h != "h99"),]
resultsplot <- resultsplot[(resultsplot$s == "s0.5"),]
resultsplot <- resultsplot[(resultsplot$comm == 500),]
resultsplot2 <- resultsplot
resultsplot2$s <- c(0.5)
colnames(resultsplot2) <- c("frequency", "common.sex", "osr", "rd", "h", "s")
# Facet by dominance to show the effect of different genetic architectures. Comm.sex = 500. OSR = 1
resultsplot3 <- resultsplot2[resultsplot2$osr == 1,]
dominance <- ggplot(resultsplot3, aes(y=1-frequency, x=as.factor(h))) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(h)), stat="ydensity", position="dodge",
alpha=0.8, trim=TRUE, scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "bottom",
text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5,)) +
guides(fill=guide_legend(title="Dominance factor")) +
ylab("Allele frequency") +
ggtitle("Effect of genetic architecture") +
scale_fill_viridis(discrete=TRUE, option = "B") +
scale_color_viridis(discrete=TRUE, option = "B")
print(dominance)
dominance <- ggplot(resultsplot3, aes(y=1-frequency, x=as.factor(h))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(h)), stat="ydensity", position="dodge",
alpha=0.8, trim=TRUE, scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "bottom",
text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5,)) +
guides(fill=guide_legend(title="Dominance factor")) +
ylab("Allele frequency") +
ggtitle("Effect of genetic architecture") +
scale_fill_viridis(discrete=TRUE, option = "B") +
scale_color_viridis(discrete=TRUE, option = "B")
print(dominance)
resultsplot <- read.csv("../../sex.bias/rscripts/parsing/Autosome.rare.male.csv", row.names = 1,
as.is = T, header = T, check.names = F)
resultsplot <- resultsplot[(resultsplot$h != "h99"),]
resultsplot <- resultsplot[(resultsplot$rd != 0),]
resultsplot <- resultsplot[(resultsplot$s == "s0.5"),]
resultsplot <- resultsplot[(resultsplot$h == "h0.5"),]
resultsplot <- resultsplot[(resultsplot$comm == 500),]
resultsplot <- resultsplot[(resultsplot$osr == 1),]
resultsplot2 <- resultsplot
resultsplot2$s <- c(0.5)
colnames(resultsplot2) <- c("frequency", "common.sex", "osr", "rd", "h", "s")
rd <- ggplot(resultsplot2, aes(y=1-frequency, x=as.factor(rd))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(rd)), stat="ydensity", position="dodge",
alpha=0.8, trim=TRUE, scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "bottom",
text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5,)) +
guides(fill=guide_legend(title="Recombination distance")) +
ylab("Allele frequency") +
ggtitle("Effect of recombination distance") +
scale_fill_viridis(discrete=TRUE, option = "B") +
scale_color_viridis(discrete=TRUE, option = "B")
print(rd)
resultsplot <- read.csv("../../sex.bias/rscripts/parsing/Autosome.rare.male.csv", row.names = 1,
as.is = T, header = T, check.names = F)
resultsplot <- resultsplot[(resultsplot$rd == 0.5),]
resultsplot <- resultsplot[(resultsplot$h == "h0.5"),]
resultsplot <- resultsplot[(resultsplot$comm == 100),]
colnames(resultsplot) <- c("frequency", "common.sex", "osr", "rd", "h", "s")
resultsplot4 <- resultsplot[(resultsplot$osr == 0.2),]
selection <- ggplot(resultsplot4, aes(y=1-frequency, x=as.factor(common.sex))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(s)), stat="ydensity", position="dodge",
alpha=0.8, trim=TRUE, scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "bottom",
text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="selection")) +
ylab("Allele frequency") +
ggtitle("Effect of selection") +
scale_fill_viridis(discrete=TRUE, option = "B") +
scale_color_viridis(discrete=TRUE, option = "B")
print(selection)
resultsplot <- read.csv("../../sex.bias/rscripts/parsing/Autosome.rare.male.csv", row.names = 1,
as.is = T, header = T, check.names = F)
resultsplot <- resultsplot[(resultsplot$rd == 0.5),]
resultsplot <- resultsplot[(resultsplot$h == "h0.5"),]
resultsplot <- resultsplot[(resultsplot$s == "s0.5"),]
resultsplot <- resultsplot[(resultsplot$comm == 500),]
resultsplot2 <- resultsplot
resultsplot2$s <- c(0.5)
colnames(resultsplot2) <- c("frequency", "common.sex", "osr", "rd", "h", "s")
autosomal <- ggplot(resultsplot2, aes(y=1-frequency, x=as.factor(common.sex))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge",
alpha=0.8, trim=TRUE, scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill= guide_legend(title="OSR")) + xlab("Common sex (females)") + ylab("Allele frequency") +
ggtitle("Autosome - XY") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
print(autosomal)
resultsplot <- read.csv("../../sex.bias/rscripts/parsing/Xchrom.rare.male.csv", row.names = 1,
as.is = T, header = T, check.names = F)
resultsplot <- resultsplot[(resultsplot$rd == 0.1),]
resultsplot <- resultsplot[(resultsplot$h == "h0.5"),]
resultsplot <- resultsplot[(resultsplot$s == "s0.5"),]
resultsplot <- resultsplot[(resultsplot$comm == 500),]
resultsplot2 <- resultsplot
resultsplot2$s <- c(0.5)
colnames(resultsplot2) <- c("frequency", "common.sex", "osr", "rd", "h", "s")
xchrom <- ggplot(resultsplot2, aes(y=frequency, x=as.factor(common.sex))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge",
alpha=0.8, trim=TRUE, scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill= guide_legend(title="OSR")) + xlab("Common sex (females)") + ylab("Allele frequency") +
ggtitle("X chromosome") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
print(xchrom)
resultsplot <- read.csv("../../sex.bias/rscripts/parsing/Ychrom.rare.female.csv", row.names = 1,
as.is = T, header = T, check.names = F)
resultsplot <- resultsplot[(resultsplot$rd == 0.1),]
resultsplot <- resultsplot[(resultsplot$h == "h0.5"),]
resultsplot <- resultsplot[(resultsplot$s == "s0.5"),]
resultsplot <- resultsplot[(resultsplot$comm == 500),]
resultsplot2 <- resultsplot
resultsplot2$s <- c(0.5)
colnames(resultsplot2) <- c("frequency", "common.sex", "osr", "rd", "h", "s")
ychrom <- ggplot(resultsplot2, aes(y=frequency, x=as.factor(common.sex))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge",
alpha=0.8, trim=TRUE, scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill= guide_legend(title="OSR")) + xlab("Common sex (Males)") + ylab("Allele frequency") +
ggtitle("Y chromosome") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
print(ychrom)
hd.rare.mal <- read.csv("../../sex.bias/figures/HD/parsed.HD.rare.male.csv",
header = TRUE, sep = ",", as.is = T, check.names = F,
row.names = 1)
result.s <- hd.rare.mal[(hd.rare.mal$s == "s0.5"),]
result.h <- result.s[(result.s$h == "h=0.5"),]
result.h$h <- c(0.5)
result.h$s <- c(0.5)
results.500 <- result.h[(result.h$comm == "comm.sex500"),]
results.500$comm <- rep(500, length(results.500$comm))
haplodiploidy.fem <- ggplot(results.500, aes(y=freq, x=as.factor(comm))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge", alpha=0.8, trim=TRUE,
scale="area") + theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="OSR")) + xlab("Common sex (females)") + ylab("Allelele frequency") +
ggtitle("Haplodiploidy - Females") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
print(haplodiploidy.fem)
# Haplodiploidy rare females (Common sex = 500, s=0.5, h=0.5)
hd.rare.fem <- read.csv("../../sex.bias/figures/HD/parsed.HD.rare.female.csv",
header = TRUE, sep = ",", as.is = T, check.names = F,
row.names = 1)
result.s <- hd.rare.fem[(hd.rare.fem$s == "s0.5"),]
result.h <- result.s[(result.s$h == "h=0.5"),]
result.h$h <- c(0.5)
result.h$s <- c(0.5)
results.500 <- result.h[(result.h$comm == "comm.sex500"),]
results.500$comm <- rep(500, length(results.500$comm))
haplodiploidy.mal <- ggplot(results.500, aes(y=1-freq, x=as.factor(comm))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge", alpha=0.8, trim=TRUE,
scale="area") + theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="OSR")) + xlab("Common sex (Males)") + ylab("Allelele frequency") +
ggtitle("Haplodiploidy - Males") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
print(haplodiploidy.mal)
load("../../sex.bias/rscripts/results/esd.RData")
esd.rare.mal <- results
result.plot <- esd.rare.mal[(esd.rare.mal$s == 0.5),]
result.plot <- result.plot[(result.plot$h == 0.5),]
results.500 <- result.plot[(result.plot$num.com == 500),]
esd <- ggplot(results.500, aes(y=freq0, x=as.factor(num.com))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha=.5) +
geom_violin(aes(fill=as.factor(OSR)), stat="ydensity", position="dodge", alpha=0.8, trim=TRUE,
scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="OSR")) +
xlab("Common sex (females)") + ylab("Allele frequency") +
ggtitle("ESD - Common sex (females)") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
print(esd)
# use grid arrange to combine all of these plots into a single figure. Number of rows = 3, so there
# will be three plots per row.
fig.2 <- grid.arrange(dominance, rd, selection, autosomal, xchrom, ychrom, haplodiploidy.fem,
haplodiploidy.mal, esd, nrow = 3)
ggsave(filename = "fig2.final.pdf",
plot= fig.2 , width=14, height=12, units="in")
View(haplodiploidy.fem)
View(hd.rare.fem)
unique(results.500$OSR)
View(results.500)
hd.rare.mal <- read.csv("../../sex.bias/figures/HD/parsed.HD.rare.male.csv",
header = TRUE, sep = ",", as.is = T, check.names = F,
row.names = 1)
result.s <- hd.rare.mal[(hd.rare.mal$s == "s0.5"),]
result.h <- result.s[(result.s$h == "h=0.5"),]
result.h$h <- c(0.5)
result.h$s <- c(0.5)
results.500 <- result.h[(result.h$comm == "comm.sex500"),]
results.500$comm <- rep(500, length(results.500$comm))
View(results.500)
unique(results.500$osr)
results.500$comm <- rep(500, length(results.500$comm))
results.500$osr[results.500$osr == "osr1"] <- 1
results.500$osr[results.500$osr == "osr0.8"] <- 0.8
results.500$osr[results.500$osr == "osr0.6"] <- 0.6
results.500$osr[results.500$osr == "osr0.4"] <- 0.4
results.500$osr[results.500$osr == "osr0.2"] <- 0.2
results.500$osr[results.500$osr == "osr0.1"] <- 0.1
results.500$osr[results.500$osr == "osr0.05"] <- 0.05
View(results.500)
haplodiploidy.fem <- ggplot(results.500, aes(y=freq, x=as.factor(comm))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge", alpha=0.8, trim=TRUE,
scale="area") + theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="OSR")) + xlab("Common sex (females)") + ylab("Allelele frequency") +
ggtitle("Haplodiploidy - Females") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
print(haplodiploidy.fem)
# Haplodiploidy rare females (Common sex = 500, s=0.5, h=0.5)
hd.rare.fem <- read.csv("../../sex.bias/figures/HD/parsed.HD.rare.female.csv",
header = TRUE, sep = ",", as.is = T, check.names = F,
row.names = 1)
result.s <- hd.rare.fem[(hd.rare.fem$s == "s0.5"),]
result.h <- result.s[(result.s$h == "h=0.5"),]
result.h$h <- c(0.5)
result.h$s <- c(0.5)
results.500 <- result.h[(result.h$comm == "comm.sex500"),]
results.500$comm <- rep(500, length(results.500$comm))
results.500$osr[results.500$osr == "osr1"] <- 1
results.500$osr[results.500$osr == "osr0.8"] <- 0.8
results.500$osr[results.500$osr == "osr0.6"] <- 0.6
results.500$osr[results.500$osr == "osr0.4"] <- 0.4
results.500$osr[results.500$osr == "osr0.2"] <- 0.2
results.500$osr[results.500$osr == "osr0.1"] <- 0.1
results.500$osr[results.500$osr == "osr0.05"] <- 0.05
haplodiploidy.mal <- ggplot(results.500, aes(y=1-freq, x=as.factor(comm))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge", alpha=0.8, trim=TRUE,
scale="area") + theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="OSR")) + xlab("Common sex (Males)") + ylab("Allelele frequency") +
ggtitle("Haplodiploidy - Males") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
print(haplodiploidy.mal)
# use grid arrange to combine all of these plots into a single figure. Number of rows = 3, so there
# will be three plots per row.
fig.2 <- grid.arrange(dominance, rd, selection, autosomal, xchrom, ychrom, haplodiploidy.fem,
haplodiploidy.mal, esd, nrow = 3)
ggsave(filename = "fig2.final.pdf",
plot= fig.2 , width=14, height=12, units="in")
install.packages(c("caret", "klaR", "mapproj", "RANN"))
#if left at default, it assumes the root of the tree, or initial state has equal probability.
# if you use a prior then it changes this.
map.2 <- make.simmap(tree=tree, x=sus.trait, pi=c(0, 2))
install.packages("ape",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("caper",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("diversitree",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("geiger",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("nlme",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("OUwie",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("phangorn",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("nlme", repos = "https://cloud.r-project.org", quiet = TRUE)
install.packages("OUwie",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("phangorn",repos="https://cloud.r-project.org",quiet=TRUE)
install.packages("phytools",repos="https://cloud.r-project.org",quiet=TRUE)
library(geiger)
library(phytools)
library(geiger)
library(phytools)
library(geiger)
library(phytools)
library(geiger)
library(phytools)
library(geiger)
library(phytools)
library(digest)
install.packages("digest")
R.version
install.packages("ape",repos="https://cloud.r-project.org",quiet=TRUE)
library(digest)
detach("package:digest", unload = TRUE)
library(digest)
install.packages("digest")
library(geiger)
library(phytools)
# simulate a bd tree in geiger
tree <- sim.bdtree(b= ,3, d= .1, n= 50)
View(tree)
class(tree)
head(phylo)
View(tree)
tree[["edge"]]
tree[["edge.length"]]
tree[["Nnode"]]
tree[["tip.label"]]
tree <- drop.extinct(tree)
plot(tree)
# simulate a bd tree in geiger
tree <- sim.bdtree(b= ,3, d= .1, n= 50)
plot(tree)
View(tree)
plot(tree)
# simulate a discrete trait
# Vertical side on the markov matrix is what you are in right now, you pick probabilities of
# transitioning to the state on the horizontal of the matrix.
# markov matrices are routinely called 'q'
q <- rbind(c(-.1, .1),
c(.4, -.4))
View(q)
sus.trait <- sim.char(phy=tree, par=q, model="discrete", root=1)[,,1]
# infer the history of a discrete trait. Allows us to estimate the rate of a given transition
map <- make.simmap(tree=tree, x=sus.trait)
library(geiger)
library(phytools)
# simulate a bd tree in geiger
tree <- sim.bdtree(b= ,3, d= .1, n= 50)
# simulate a bd tree in geiger
tree <- sim.bdtree(b= ,3, d= .1, n= 50)
tree <- drop.extinct(tree)
plot(tree)
# simulate a discrete trait
# Vertical side on the markov matrix is what you are in right now, you pick probabilities of
# transitioning to the state on the horizontal of the matrix.
# markov matrices are routinely called 'q'
q <- rbind(c(-.1, .1),
c(.4, -.4))
sus.trait <- sim.char(phy=tree, par=q, model="discrete", root=1)[,,1]
# infer the history of a discrete trait. Allows us to estimate the rate of a given transition
map <- make.simmap(tree=tree, x=sus.trait)
# infer the history of a discrete trait. Allows us to estimate the rate of a given transition
map <- make.simmap(tree=tree, x=sus.trait)
plotSimmap(map)
#if left at default, it assumes the root of the tree, or initial state has equal probability.
# if you use a prior then it changes this.
map.2 <- make.simmap(tree=tree, x=sus.trait, pi=c(0, 2))
plotSimmap(map.2)
View(q)
?make.simmap
View(q)
View(q)
# allow rate to change. i.e. all transition rates can be different.
map.3 <- make.simmap(tree=tree, x=sus.trait, pi=c(0, 2), model="ARD")
plotSimmap(map.3)
View(q)
View(q)
View(q)
# simulate a continuous trait (expression level of a gene for example)
exp.trait <- sim.char(phy=tree, par=.3, model="BM", root=5)[,,1]
# infer the history of a continuous trait
contMap(tree=tree, x=exp.trait, type = "fan")
View(q)

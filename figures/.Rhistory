if(sum(site) < 45){
y[i] <- T
}
}
}
View(het.table)
# Horse X Chromosome Mapping
load("Desktop/human.het.data.RData")
exons <- read.csv("Desktop/human_exon_pos.csv")
exonic <- rep(F, times=length(results[[1]]))
for(i in 1:nrow(exons)){
exonic[exons[i,1]:exons[i,2]] <- T
}
x <- which(exonic)
for(i in 1:4){
results[[i]] <- results[[i]][x]
}
het.table <- cbind(results[[1]],results[[2]],results[[3]],results[[4]])
View(het.table)
colnames(het.table) <- names(results)
y <- rep(F, length(x))
for(i in 1:nrow(het.table)){
#print(i)
site <- het.table[i,]
if(sum(site>10)==2){
if(sum(site) < 45){
y[i] <- T
}
}
}
# a window note that this just ignores those NA sites
slidingWindow <- function(y,x, window, step){
total <- length(y)
spots <- seq(from = 1, to = (total - window + 1), by = step)
result <- loc <- vector(length = length(spots))
for(i in 1:length(spots)){
result[i] <- mean(y[spots[i]:(spots[i] + window - 1)], na.rm = T)
loc[i] <- mean(x[spots[i]:(spots[i] + window - 1)], na.rm = T)
}
z <- list(result, loc)
names(z) <- c("value", "loc")
return(z)
}
smooth.results <- slidingWindow(y,x,15000,1000)
plot(smooth.results[[1]]~smooth.results[[2]], type="l", lwd=.6, xlim=c(0,9000000))
rect(10000, 0, 2600000, 1, col=rgb(1,0,0,.2), border=NA)
y <- rep(F, length(x))
for(i in 1:nrow(het.table)){
#print(i)
site <- het.table[i,]
if(sum(site>10)==2){
if(sum(site) < 70){
y[i] <- T
}
}
}
smooth.results <- slidingWindow(y,x,15000,1000)
plot(smooth.results[[1]]~smooth.results[[2]], type="l", lwd=.6, xlim=c(0,9000000))
y <- rep(F, length(x))
for(i in 1:nrow(het.table)){
#print(i)
site <- het.table[i,]
if(sum(site>10)==2){
if(sum(site) < 170){
y[i] <- T
}
}
}
smooth.results <- slidingWindow(y,x,15000,1000)
plot(smooth.results[[1]]~smooth.results[[2]], type="l", lwd=.6, xlim=c(0,9000000))
rect(10000, 0, 2600000, 1, col=rgb(1,0,0,.2), border=NA)
y <- rep(F, length(x))
for(i in 1:nrow(het.table)){
#print(i)
site <- het.table[i,]
if(sum(site>10)==2){
# if(sum(site) < 170){
y[i] <- T
# }
}
}
smooth.results <- slidingWindow(y,x,15000,1000)
plot(smooth.results[[1]]~smooth.results[[2]], type="l", lwd=.6, xlim=c(0,9000000))
rect(10000, 0, 2600000, 1, col=rgb(1,0,0,.2), border=NA)
View(het.table)
hist(rowSums(het.table))
plot(density(rowSums(het.table)))
plot(density(rowSums(het.table)),xlim=c(0,400))
rowSums(het.table)->foobar
plot(density(foobar[foobar<400]))
plot(density(foobar[foobar<400]),xlim-c(0,78))
plot(density(foobar[foobar<400]),xlim=c(0,78))
plot(y=foobar,x=1:length(foobar),type="l")
exons <- read.csv("Desktop/human_exon_pos.csv")
exonic <- rep(F, times=length(results[[1]]))
for(i in 1:nrow(exons)){
exonic[exons[i,1]:exons[i,2]] <- T
}
exons <- read.csv("Desktop/human_exon_pos.csv")
exonic <- rep(F, times=length(results[[1]]))
for(i in 1:nrow(exons)){
exonic[exons[i,1]:exons[i,2]] <- T
}
x <- which(exonic)
for(i in 1:4){
results[[i]] <- results[[i]][x]
}
het.table <- cbind(results[[1]],results[[2]],results[[3]],results[[4]])
colnames(het.table) <- names(results)
y <- rep(F, length(x))
for(i in 1:nrow(het.table)){
#print(i)
site <- het.table[i,]
if(sum(site>6)==2){
# if(sum(site) < 170){
y[i] <- T
# }
}
}
load("Desktop/human.het.data.RData")
exons <- read.csv("Desktop/human_exon_pos.csv")
exonic <- rep(F, times=length(results[[1]]))
for(i in 1:nrow(exons)){
exonic[exons[i,1]:exons[i,2]] <- T
}
x <- which(exonic)
for(i in 1:4){
results[[i]] <- results[[i]][x]
}
het.table <- cbind(results[[1]],results[[2]],results[[3]],results[[4]])
colnames(het.table) <- names(results)
y <- rep(F, length(x))
for(i in 1:nrow(het.table)){
#print(i)
site <- het.table[i,]
if(sum(site>6)==2){
# if(sum(site) < 170){
y[i] <- T
# }
}
}
# a window note that this just ignores those NA sites
slidingWindow <- function(y,x, window, step){
total <- length(y)
spots <- seq(from = 1, to = (total - window + 1), by = step)
result <- loc <- vector(length = length(spots))
for(i in 1:length(spots)){
result[i] <- mean(y[spots[i]:(spots[i] + window - 1)], na.rm = T)
loc[i] <- mean(x[spots[i]:(spots[i] + window - 1)], na.rm = T)
}
z <- list(result, loc)
names(z) <- c("value", "loc")
return(z)
}
smooth.results <- slidingWindow(y,x,15000,1000)
plot(smooth.results[[1]]~smooth.results[[2]], type="l", lwd=.6, xlim=c(0,9000000))
plot(smooth.results[[1]]~smooth.results[[2]], type="l", lwd=.6, xlim=c(0,9000000))
rect(10000, 0, 2600000, 1, col=rgb(1,0,0,.2), border=NA)
smooth.results <- slidingWindow(y,x,1500,500)
plot(smooth.results[[1]]~smooth.results[[2]], type="l", lwd=.6, xlim=c(0,9000000))
rect(10000, 0, 2600000, 1, col=rgb(1,0,0,.2), border=NA)
smooth.results <- slidingWindow(y,x,2500,1500)
plot(smooth.results[[1]]~smooth.results[[2]], type="l", lwd=.6, xlim=c(0,9000000))
rect(10000, 0, 2600000, 1, col=rgb(1,0,0,.2), border=NA)
mean(smooth.results[[1]][smooth.results[[2]]<2600000])
smooth.results <- slidingWindow(y,x,2500,100)
plot(smooth.results[[1]]~smooth.results[[2]], type="l", lwd=.6, xlim=c(0,9000000))
smooth.results <- slidingWindow(y,x,5000,100)
plot(smooth.results[[1]]~smooth.results[[2]], type="l", lwd=.6, xlim=c(0,9000000))
rect(10000, 0, 2600000, 1, col=rgb(1,0,0,.2), border=NA)
smooth.results <- slidingWindow(y,x,15000,100)
plot(smooth.results[[1]]~smooth.results[[2]], type="l", lwd=.6, xlim=c(0,9000000))
rect(10000, 0, 2600000, 1, col=rgb(1,0,0,.2), border=NA)
setwd("~/Desktop")
tree <- read.nexus("tree.2011.kuhn.tre")[[1]]
library(ape)
tree <- read.nexus("tree.2011.kuhn.tre")[[1]]
tree$tip.label
setwd("~/Desktop")
dat <- read.csv("data.csv")
View(dat)
sort(tree$tip.label)
dat <- read.csv("data.csv")
dat$species
dat <- read.csv("data.csv", as.is=T)
dat$species
dat$species %in% tree$tip.label
sort(tree$tip.label)[1:100]
sort(tree$tip.label)[200:300]
sort(tree$tip.label)[800:900]
sort(tree$tip.label)[1800:1900]
sort(tree$tip.label)[1700:1800]
sort(tree$tip.label)[1500:1800]
sort(tree$tip.label)[1300:1500]
dat$species %in% tree$tip.label
dat$species[dat$species %in% tree$tip.label]
dat$species[!dat$species %in% tree$tip.label]
sort(tree$tip.label)[100:500]
sort(tree$tip.label)[500:900]
sort(tree$tip.label)[1200:1900]
sort(tree$tip.label)[1200:1900]
sort(tree$tip.label)[1900:2900]
sort(tree$tip.label)[1900:2900]
sort(tree$tip.label)[2900:3900]
sort(tree$tip.label)[2900:3900]
sort(tree$tip.label)[3900:4900]
dat <- read.csv("data.csv", as.is=T)
dat$species[!dat$species %in% tree$tip.label]
sort(tree$tip.label)[10:1000]
dat$species[!dat$species %in% tree$tip.label]
sort(tree$tip.label)[2000:3000]
dat$species[!dat$species %in% tree$tip.label]
sort(tree$tip.label)[1000:2000]
dat$species[!dat$species %in% tree$tip.label]
dat$species[!dat$species %in% tree$tip.label]
sort(tree$tip.label)[2000:3000]
dat <- read.csv("data.csv", as.is=T)
dat$species[!dat$species %in% tree$tip.label]
tips <- rep("1", length(tree$tip.label))
tips <- rep(1, length(tree$tip.label))
names(tips) <- tree$tip.label
plot(tree,show.tip.label = F)
plot(tree,show.tip.label = F, type="F")
plot(tree,show.tip.label = F, type="f")
dat <- read.csv("data.csv", as.is=T)
dat$species[!dat$species %in% tree$tip.label]
sort(tree$tip.label)[2000:3000]
dat$species[!dat$species %in% tree$tip.label]
sort(tree$tip.label)[1000:2000]
dat$species[!dat$species %in% tree$tip.label]
sort(tree$tip.label)[1:1000]
sort(tree$tip.label)[3001:4000]
sort(tree$tip.label)[4001:5000]
dat <- read.csv("data.csv", as.is=T)
dat$species[!dat$species %in% tree$tip.label]
dat <- read.csv("data.csv", as.is=T)
dat$species[!dat$species %in% tree$tip.label]
sort(tree$tip.label)[1001:2000]
sort(tree$tip.label)[2001:3000]
dat <- read.csv("data.csv", as.is=T)
dat$species[!dat$species %in% tree$tip.label]
xydat <- read.csv("data.vert.csv")
sum(tree$tip.label %in% c(dat$species,xydat))
xydat <- read.csv("data.vert.csv",as.is=T)
sum(tree$tip.label %in% c(dat$species,xydat))
sum(tree$tip.label %in% xydat)
xydat
xydat <- read.csv("data.vert.csv",as.is=T,head=F)
sum(tree$tip.label %in% xydat$V1)
sum(tree$tip.label %in% c(dat$species, xydat$V1))
good <- tree$tip.label %in% c(dat$species, xydat$V1)
help(drop.tip)
good <- which(tree$tip.label %in% c(dat$species, xydat$V1))
pruned.tree <- keep.tip(phy=tree, tip=good)
plot(pruned.tree,type"f")
plot.phylo(pruned.tree,type="f",show.tip.label = F)
tree <- read.nexus("pruned.trees.no.poly.nex")[[1]]
tree <- read.nexus("pruned.trees.no.poly.nex")
tree <- read.nexus("pruned.trees.no.poly.nex")[1]
tree <- read.nexus("pruned.trees.no.poly.nex")[[1]]
class(tree) <- "phylo"
plot(tree)
plot(tree, show.tip.label=F)
length(tree$tip.label)
plot(tree, show.tip.label=F, type="f")
dat <- read.csv("data.csv", as.is=T)
dat$species[!dat$species %in% tree$tip.label]
tree$tip.label
sort(tree$tip.label)
sort(tree$tip.label)[-c(1:100)]
sort(tree$tip.label)
sort(tree$tip.label)[-c(1:100)]
dat$species[!dat$species %in% tree$tip.label]
dat <- read.csv("data.csv", as.is=T)
dat$species[!dat$species %in% tree$tip.label]
dat <- read.csv("data.csv", as.is=T)
dat$species[!dat$species %in% tree$tip.label]
sort(tree$tip.label)[-c(1:100)]
dat$species[!dat$species %in% tree$tip.label]
dat <- read.csv("data.csv", as.is=T)
dat$species[!dat$species %in% tree$tip.label]
library(ape)
tree <- read.nexus("pruned.trees.no.poly.nex")[[1]]
class(tree) <- "phylo"
plot(tree, show.tip.label=F, type="f")
dat <- read.csv("data.csv", as.is=T)
dat$species[!dat$species %in% tree$tip.label]
i <- 1
which(tree$tip.label == dat$species[i])
unique(dat$karyotype)
for(i in 1:nrow(dat)){
hit <- which(tree$tip.label == dat$species[i])
if(dat$karyotype[i] == "complex XY") tips[hit] <- 2
if(dat$karyotype[i] == "achiasmatic") tips[hit] <- 3
if(dat$karyotype[i] == "XO") tips[hit] <- 4
}
# 1 for XY
tips <- rep(1, length(tree$tip.label))
names(tips) <- tree$tip.label
for(i in 1:nrow(dat)){
hit <- which(tree$tip.label == dat$species[i])
if(dat$karyotype[i] == "complex XY") tips[hit] <- 2
if(dat$karyotype[i] == "achiasmatic") tips[hit] <- 3
if(dat$karyotype[i] == "XO") tips[hit] <- 4
}
table(tips)
cols <- c(rgb(27,158,119, maxColorValue = 255),
rgb(217,95,2, maxColorValue = 255),
rgb(117,112,179, maxColorValue = 255),
rgb(231,41,138, maxColorValue = 255))[tips]
tiplabels(col=cols, pch=16)
tiplabels(col=cols, pch=15,cex=.5)
plot(tree, show.tip.label=F, type="f")
tiplabels(col=cols, pch=15,cex=.5)
plot(tree, show.tip.label=F, type="f")
tiplabels(col=cols, pch=15,cex=.15)
cexs <- rep(.2, length(cols))
cexs[tips!=1]<-1
tiplabels(col=cols, pch=15,cex=cexs)
plot(tree, show.tip.label=F, type="f")
help("tiplabels")
plot(tree, cex=.1, type="f")
plot(tree, show.tip.label=F, type="f")
p.cols <- cols[tips!=1]
tiplabels(tips=which(tips!=1), col=p.cols, pch=16,cex=cexs)
help("tiplabels")
tiplabels(tip=which(tips!=1), col=p.cols, pch=16,cex=cexs)
plot(tree, show.tip.label=F, type="f")
tiplabels(tip=which(tips!=1), col=p.cols, pch=16,cex=1)
plot(tree, show.tip.label=F, type="f")
tiplabels(tip=which(tips!=1), col=p.cols, pch=16,cex=.5)
table(dat$karyotype)
plot(tree, show.tip.label=F, type="f")
tiplabels(tip=which(tips!=1), col=p.cols, pch=16,cex=.75)
plot(tree, show.tip.label=F, type="f")
plot(x=c(1,1,1,1),y=c(1,2,3,4),pch=16,cex=2,col=c(rgb(27,158,119, maxColorValue = 255),
rgb(217,95,2, maxColorValue = 255),
rgb(117,112,179, maxColorValue = 255),
rgb(231,41,138, maxColorValue = 255)))
plot(x=c(1,1,1,1,1,1),y=c(0,2,2.5,3,3.5,10),pch=16,cex=2,col=c(rgb(27,158,119, maxColorValue = 255),
rgb(217,95,2, maxColorValue = 255),
rgb(117,112,179, maxColorValue = 255),
rgb(231,41,138, maxColorValue = 255)))
pos <- 1:10000000
pop <- sample(c("A","B"), size=length(pos), replace=T)
val <- rnorm(size=length(pos))
help(rnorm)
dat <- data.frame(pos,pop,val)
val <- rnorm(n=length(pos))
dat <- data.frame(pos,pop,val)
ypos <- as.factor(dat$pop)
range(dat$val)
colval <- rescale(dat$val, from=1, to = 1000)
library(scales)
colval <- rescale(dat$val, from=1, to = 1000)
plot(x=dat$pos, y=ypos, col=col)
setwd("~/Desktop/Dropbox/gitrepos/sex.bias/figures")
# Script to plot figure 2 for the manuscript
library(ggplot2)
library(viridis)
library(ggpubr)
library(cowplot)
library(gridExtra)
library(ggpubr)
library(grid)
library(lattice)
resultsplot <-
read.csv("../../sex.bias/rscripts/parsing/Autosome.rare.male.csv",
row.names = 1, as.is = T, header = T, check.names = F)
resultsplot <- resultsplot[(resultsplot$rd == 0.5),]
resultsplot <- resultsplot[(resultsplot$h != "h99"),]
resultsplot <- resultsplot[(resultsplot$s == "s0.5"),]
resultsplot <- resultsplot[(resultsplot$comm == 500),]
resultsplot2 <- resultsplot
resultsplot2$s <- c(0.5)
colnames(resultsplot2) <- c("frequency", "common.sex", "osr", "rd", "h", "s")
# Facet by dominance to show the effect of different genetic architectures.
# Comm.sex = 500. OSR = 1
resultsplot3 <- resultsplot2[resultsplot2$osr == 1,]
dominance <- ggplot(resultsplot3, aes(y=frequency, x=as.factor(h))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(h)), stat="ydensity", position="dodge",
alpha=0.8, trim=TRUE, scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "none") +
ylab("Allele frequency") +
ggtitle("Effect of genetic architecture") +
scale_fill_viridis(discrete=TRUE, option = "B") +
scale_color_viridis(discrete=TRUE, option = "B")
resultsplot <-
read.csv("../../sex.bias/rscripts/parsing/Autosome.rare.male.csv",
row.names = 1, as.is = T, header = T, check.names = F)
resultsplot <- resultsplot[(resultsplot$h != "h99"),]
resultsplot <- resultsplot[(resultsplot$rd != 0),]
resultsplot <- resultsplot[(resultsplot$s == "s0.5"),]
resultsplot <- resultsplot[(resultsplot$h == "h0.5"),]
resultsplot <- resultsplot[(resultsplot$comm == 500),]
resultsplot <- resultsplot[(resultsplot$osr == 1),]
resultsplot2 <- resultsplot
resultsplot2$s <- c(0.5)
colnames(resultsplot2) <- c("frequency", "common.sex", "osr", "rd", "h", "s")
rd <- ggplot(resultsplot2, aes(y=1-frequency, x=as.factor(rd))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(rd)), stat="ydensity", position="dodge",
alpha=0.8, trim=TRUE, scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "none") +
ylab("Allele frequency") +
ggtitle("Effect of recombination") +
scale_fill_viridis(discrete=TRUE, option = "B") +
scale_color_viridis(discrete=TRUE, option = "B")
resultsplot <-
read.csv("../../sex.bias/rscripts/parsing/Autosome.rare.male.csv",
row.names = 1, as.is = T, header = T, check.names = F)
resultsplot <- resultsplot[(resultsplot$rd == 0.5),]
resultsplot <- resultsplot[(resultsplot$h == "h0.5"),]
resultsplot <- resultsplot[(resultsplot$comm == 500),]
colnames(resultsplot) <- c("frequency", "common.sex", "osr", "rd", "h", "s")
resultsplot4 <- resultsplot[(resultsplot$osr == 0.1),]
selection <- ggplot(resultsplot4, aes(y=1-frequency, x=as.factor(common.sex))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(s)), stat="ydensity", position="dodge",
alpha=0.8, trim=TRUE, scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "none") +
ylab("Allele frequency") +
ggtitle("Effect of selection") +
scale_fill_viridis(discrete=TRUE, option = "B") +
scale_color_viridis(discrete=TRUE, option = "B")
resultsplot <-
read.csv("../../sex.bias/rscripts/parsing/Autosome.rare.male.csv",
row.names = 1, as.is = T, header = T, check.names = F)
resultsplot <- resultsplot[(resultsplot$rd == 0.5),]
resultsplot <- resultsplot[(resultsplot$h == "h0.5"),]
resultsplot <- resultsplot[(resultsplot$s == "s0.5"),]
resultsplot <- resultsplot[(resultsplot$comm == 500),]
resultsplot2 <- resultsplot
resultsplot2$s <- c(0.5)
colnames(resultsplot2) <- c("frequency", "common.sex", "osr", "rd", "h", "s")
ggplot(resultsplot2, aes(y=1-frequency, x=as.factor(common.sex))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha = .5) +
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge",
alpha=0.8, trim=TRUE, scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "none") +
ylab("Allele frequency") +
ggtitle("Autosomal") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
pos <- 1:65450
pop <- sample(c("A","B"), size=length(pos), replace=T)
65450/2
pos <- 1:65450
valA <- runif(min=0, max=1, n=length(pos))
valB <- runif(min=0, max=1, n=length(pos))
dat <- data.frame(pos,valA,valB)
View(dat)
plot(0,0,xlim=c(min(dat$pos), max(data$pos)),
col="white",
xlab="chromosome position",
ylab="allele freq (ref allele)")
c(min(dat$pos), max(data$pos))
min(dat$pos)
plot(0,0,xlim=c(min(dat$pos), max(dat$pos)),
col="white",
xlab="chromosome position",
ylab="allele freq (ref allele)")
plot(0,0,xlim=c(min(dat$pos), max(dat$pos)),
ylim=c(0,3)
col="white",
xlab="chromosome position",
ylab="population",
yaxt="n")
plot(0,0,xlim=c(min(dat$pos), max(dat$pos)),
ylim=c(0,3),
col="white",
xlab="chromosome position",
ylab="population",
yaxt="n")
library(viridis)
cols <- viridis(1001)
round(dat$valA * 1000)
popAcols <- viridis(1001)[(round(dat$valA * 1000)+1)]
popBcols <- viridis(1001)[(round(dat$valB * 1000)+1)]
for(i in 1:nrow(dat)){
for(i in 1:nrow(dat)){
lines(x=rep(dat$pos[i], 2),
y=c(.3,1.3), col=popAcols[i], lwd=.3)
}
for(i in 1:nrow(dat)){
lines(x=rep(dat$pos[i], 2),
y=c(.3,1.3), col=popAcols[i], lwd=.3)
lines(x=rep(dat$pos[i], 2),
y=c(1.7,2.7), col=popBcols[i], lwd=.3)
}
shiny::runApp('~/Desktop/foo')

"A",
"A",
"D",
"D",
"E",
"E",
"G",
"G",
"G",
"G"
),
64,
2
)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna) / 3
starts <- seq(from = 1,
by = 3,
length.out = num.codons)
for (i in 1:num.codons) {
codons[i] <- substring(dna, starts[i], starts[i] + 2)
}
result <- c()
for (i in 1:length(codons)) {
result[[i]] <- table[table[, 1] == dna[i], 2]
if (!dna[i] %in% table[, 1]) {
result[[i]] <- '-'
}
return(paste(unlist(result), sep = "", collapse = " "))
}
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
translate(sequence)
translate(sequence)
library(devtools)
document()
check()
library(devtools)
document(x)
document()
check()
translate(sequence)
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:length(num.codons)){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[[i]] <- table[table[,1] == dna[i], 2]
if(!dna[i] %in% table[,1]){
result[[i]] <- '-'
}
return(paste(unlist(result), sep="", collapse= " "))
}
translate(sequence)
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[[i]] <- table[table[,1] == dna[i], 2]
if(!dna[i] %in% table[,1]){
result[[i]] <- '-'
}
return(paste(unlist(result), sep="", collapse= " "))
}
translate(sequence)
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[[i]] <- table[table[,1] == dna[i], 2]
if(!dna[i] %in% table[,1]){
result[[i]] <- '-'
}
return(paste(unlist(result), sep="", collapse= " "))
}
}
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[[i]] <- table[table[,1] == dna[i], 2]
if(!dna[i] %in% table[,1]){
result[[i]] <- '-'
}
return(paste(unlist(result), sep="", collapse= " "))
}
}
}
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[[i]] <- table[table[,1] == dna[i], 2]
if(!dna[i] %in% table[,1]){
result[[i]] <- '-'
}
return(paste(unlist(result), sep="", collapse= " "))
}
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
translate(sequence)
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
library(devtools)
install.packages('github/evoclock')
install_github('github/evoclock')
install_github('github/evoclock')
install_github("github/evoclock")
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]], 2]
}
return(paste(unlist(result), sep="", collapse= ""))
}
translate(sequence)
setwd("~/Documents/GitHub/translateR")
setwd("~/Documents/GitHub/translateR/vignettes")
# load the package
library(TranslateR)
# store a DNA sequence
data <- "ATGtacacagctaaaGAacggauuuctacacatGAAGgtagagaggccacagagagcacguag"
# translate the DNA sequence to IUPAC amino acid codes.
output <- Tslate(data)
#'Translate any DNA or RNA sequence to IUPAC amino acid code
#'
#'@param sequence a text string containg a DNA or RNA sequence
#'@return A text string that represents the translated amino acid sequence
#'@examples
#'sequence <- "ATGCTGTAG"
#'Tslate(sequence)
#'@export
Tslate <- function(sequence){
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("TTT","TTC","TTA","TTG","CTT","CTC","CTA","CTG","ATT","ATC","ATA","ATG",
"GTT","GTC","GTA","GTG","TCT","TCC","TCA","TCG","CCT","CCC","CCA","CCG",
"ACT","ACC","ACA","ACG","GCT","GCC","GCA","GCG","TAT","TAC","TAA","TAG",
"CAT","CAC","CAA","CAG","AAT","AAC","AAA","AAG","GAT","GAC","GAA","GAG",
"TGT","TGC","TGA","TGG","CGT","CGC","CGA","CGG","AGT","AGC","AGA","AGG",
"GGT","GGC","GGA","GGG","F","F","L","L","L","L","L","L","I","I","I","M",
"V","V","V","V","S","S","S","S","P","P","P","P","T","T","T","T","A","A",
"A","A","Y","Y","*","*","H","H","Q","Q","N","N","K","K","D","D","E","E",
"C","C","*","W","R","R","R","R","S","S","R","R","G","G","G","G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]] , 2]
}
return(paste(unlist(result), sep="", collapse=""))
}
Tslate(data)
# translate the DNA sequence to IUPAC amino acid codes.
Tslate(data)
# load the package
library(TranslateR)
# store a DNA sequence
data <- "ATGtacacagctaaaGAacggauuuctacacatGAAGgtagagaggccacagagagcacguag"
# translate the DNA sequence to IUPAC amino acid codes.
Tslate(data)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('evoclock/TranslateR', buld_vignettes = T)
# load the package
library(TranslateR)
# store a DNA sequence
data <- "ATGtacacagctaaaGAacggauuuctacacatGAAGgtagagaggccacagagagcacguag"
# translate the DNA sequence to IUPAC amino acid codes.
Tslate(data)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('evoclock/translateR', buld_vignettes = T)
# load the package
library(TranslateR)
# store a DNA sequence
data <- "ATGtacacagctaaaGAacggauuuctacacatGAAGgtagagaggccacagagagcacguag"
# translate the DNA sequence to IUPAC amino acid codes.
Tslate(data)
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
install_github('evoclock/translateR', buld_vignettes = T)
# Example code
``` {r}
# load the package
library(TranslateR)
# store a DNA sequence
data <- "ATGtacacagctaaaGAacggauuuctacacatGAAGgtagagaggccacagagagcacguag"
# translate the DNA sequence to IUPAC amino acid codes.
Tslate(data)
# load the package
library(TranslateR)
# store a DNA sequence
data <- "ATGtacacagctaaaGAacggauuuctacacatGAAGgtagagaggccacagagagcacguag"
# translate the DNA sequence to IUPAC amino acid codes.
Tslate(data)
install.packages("devtools")
library(devtools)
install_github('evoclock/translateR', buld_vignettes = T)
install.packages("devtools")
# load the package
library(TranslateR)
# store a DNA sequence
data <- "ATGtacacagctaaaGAacggauuuctacacatGAAGgtagagaggccacagagagcacguag"
# translate the DNA sequence to IUPAC amino acid codes.
Tslate(data)
setwd("~/Documents/GitHub/translateR/R")
install.packages("devtools")
library(devtools)
install_github('evoclock/translateR', buld_vignettes = T)
# load the package
library(TranslateR)
# store a DNA sequence
data <- "ATGtacacagctaaaGAacggauuuctacacatGAAGgtagagaggccacagagagcacguag"
# translate the DNA sequence to IUPAC amino acid codes.
Tslate(data)
install.packages("devtools")
library(devtools)
install_github('evoclock/translateR')
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('evoclock/translateR', buld_vignettes = T)
install.packages("devtools")
library(devtools)
install_github('evoclock/translateR', buld_vignettes = T)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('evoclock/translateR', buld_vignettes = T)
install.packages("devtools")
library(devtools)
install_github('evoclock/translateR', build_vignettes = T)
install.packages("devtools")
library(devtools)
install_github('evoclock/translateR', build_vignettes = T)
setwd("~/Documents/GitHub/sex.bias/figures")
esd.rare.mal <- read.csv("../results/ESD.raremal.csv",
header = TRUE, sep = ",", as.is = T, check.names = F,
row.names = 1)
View(esd.rare.mal)
result.plot <- esd.rare.mal[(esd.rare.mal$s == 0.5),]
result.plot <- result.plot[(result.plot$h == 0.5),]
results.500 <- result.plot[(result.plot$num.com == 500),]
esd.rare.mal <- ggplot(results.500, aes(y=freq0, x=as.factor(num.com))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha=.5) +
geom_violin(aes(fill=as.factor(OSR)), stat="ydensity", position="dodge", alpha=0.8, trim=TRUE,
scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "none") +
ylab("Allele frequency") +
ggtitle("ESD") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
# Script to plot figure 2 for the manuscript
library(ggplot2)
library(viridis)
library(ggpubr)
library(cowplot)
library(gridExtra)
library(ggpubr)
library(grid)
library(lattice)
esd.rare.mal <- ggplot(results.500, aes(y=freq0, x=as.factor(num.com))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha=.5) +
geom_violin(aes(fill=as.factor(OSR)), stat="ydensity", position="dodge", alpha=0.8, trim=TRUE,
scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "none") +
ylab("Allele frequency") +
ggtitle("ESD") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
print(esd.rare.mal)
View(esd.rare.mal)
library(readr)
ESD_rarefem <- read_csv("~/Documents/GitHub/sex.bias/results/ESD.rarefem.csv")
View(ESD_rarefem)
esd.rare.mal <- read.csv("../results/ESD.rarefem.csv",
header = TRUE, sep = ",", as.is = T, check.names = F,
row.names = 1)
result.plot <- esd.rare.mal[(esd.rare.mal$s == 0.5),]
result.plot <- result.plot[(result.plot$h == 0.5),]
results.500 <- result.plot[(result.plot$num.com == 500),]
esd.rare.mal <- ggplot(results.500, aes(y=freq0, x=as.factor(num.com))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha=.5) +
geom_violin(aes(fill=as.factor(OSR)), stat="ydensity", position="dodge", alpha=0.8, trim=TRUE,
scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "none") +
ylab("Allele frequency") +
ggtitle("ESD") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
print(esd.rare.mal)
esd.rare.mal <- ggplot(results.500, aes(y=freq1, x=as.factor(num.com))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha=.5) +
geom_violin(aes(fill=as.factor(OSR)), stat="ydensity", position="dodge", alpha=0.8, trim=TRUE,
scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "none") +
ylab("Allele frequency") +
ggtitle("ESD") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
print(esd.rare.mal)
esd.rare.mal <- read.csv("../results/ESD.raremal.csv",
header = TRUE, sep = ",", as.is = T, check.names = F,
row.names = 1)
result.plot <- esd.rare.mal[(esd.rare.mal$s == 0.5),]
result.plot <- result.plot[(result.plot$h == 0.5),]
results.500 <- result.plot[(result.plot$num.com == 500),]
esd.rare.mal <- ggplot(results.500, aes(y=1-freq0, x=as.factor(num.com))) +
ylim(0, 1) +
geom_hline(yintercept = .5, alpha=.5) +
geom_violin(aes(fill=as.factor(OSR)), stat="ydensity", position="dodge", alpha=0.8, trim=TRUE,
scale="area") +
theme_light() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "none") +
ylab("Allele frequency") +
ggtitle("ESD") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
print(esd.rare.mal)
esd.rare.mal <- read.csv("../results/ESD.raremal.csv",
header = TRUE, sep = ",", as.is = T, check.names = F,
row.names = 1)
esd.rare.mal$num.com == 500
View(esd.rare.mal)

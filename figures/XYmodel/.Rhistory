setwd("~/Desktop/Dropbox/projects/sex.bias/rscripts/parsing")
load("../results/hd.rare.females.RData")
results$
results$comm.sex1000$osr1
results$comm.sex1000$osr1$s0.1
results$comm.sex1000$osr1$s0.1$`h=0`
result <- as.data.frame(matrix(,112000,5))
colnames(result) <- c("freq", "comm", "osr", "s", "h")
rs <- 1
i <- j<- k<-m<-1
x <- results[[i]][[j]][[k]][[m]]
x <- results[[i]][[j]][[k]]
View(x)
setwd("~/Desktop/Dropbox/projects/sex.bias/rscripts/analyses")
# repeat
comm.sex <- c(1000, 500, 100, 50)
osr <- c(1, .8, .6, .4, .2, .1,.05)
s <- c(0.1, 0.2, 0.5, 0.9)
h <- c(0.0, 0.5, 1.0)
replicates <- 1000
max.gens <- 500
source("functions.HD.R")
# build the structure of the results as a tree of lists with names
# that describe the parameter values the terminal lists in this
# will be tables with rows equal to number iterations and columns
# equal to different dominance (h) values.
results <- list()
for(i in 1:length(comm.sex)){
results[[i]] <- list()
names(results)[i] <- paste("comm.sex", comm.sex[i], sep="")
for(j in 1:length(osr)){
results[[i]][[j]] <- list()
names(results[[i]])[j] <- paste("osr", osr[j], sep="")
for(k in 1:length(s)){
results[[i]][[j]][[k]] <- list()
names(results[[i]][[j]])[k] <- paste("s", s[k], sep="")
}
}
}
# these nested loops will test each scenario pairing different
# parameters as appropriate
for(i in 1:length(comm.sex)){
# just prints to let us know progress
print(paste("working on common sex =", comm.sex[i]))
for(j in 1:length(osr)){
# here we calculate number of males and females in the pop
females <- round(comm.sex[i]*osr[j])
males <- comm.sex[i]
# here we calculate the total number of chromosomes
chroms <- males + 2 * females
for(k in 1:length(s)){
# this sets up the tables that will hold a set of results
cur.result <- as.data.frame(matrix(NA,replicates, length(h)))
colnames(cur.result) <- c("h=0", "h=0.5", "h=1")
for(m in 1:length(h)){
# how many cores to run on
registerDoMC(2)
x <- foreach (iter = 1:replicates, .combine = "c") %dopar% {
# sets up the initial population
pop <- GetInitialPop(females, males)
# this flag and counter will allow us to break out of the
# while loop if an allele fixes or we have run as long
# as we want to allow it to run
segregating <- T
counter <- 1
while(segregating){
# one generation of selection
pop <- Generation(pop, s=s[k], h=h[m], females, males)
# calculate the frequency of 0 allele. i.e. female beneficial
fre <- (pop$pop.mal[1] + pop$pop.fem[1]*2 + pop$pop.fem[2]) / chroms
# test whether we have met stopping conditions
if(fre == 0 | fre == 1 | counter == max.gens){
segregating <- F
}
counter <- counter + 1
}
# store the result of a single simulation
fre
}
cur.result[, m] <- x
}
# store a table of results for 112,000 simulations
results[[i]][[j]][[k]] <- cur.result
}
}
}
# build the structure of the results as a tree of lists with names
# that describe the parameter values the terminal lists in this
# will be tables with rows equal to number iterations and columns
# equal to different dominance (h) values.
results <- list()
for(i in 1:length(comm.sex)){
results[[i]] <- list()
names(results)[i] <- paste("comm.sex", comm.sex[i], sep="")
for(j in 1:length(osr)){
results[[i]][[j]] <- list()
names(results[[i]])[j] <- paste("osr", osr[j], sep="")
for(k in 1:length(s)){
results[[i]][[j]][[k]] <- list()
names(results[[i]][[j]])[k] <- paste("s", s[k], sep="")
}
}
}
i <- j<- 1
# just prints to let us know progress
print(paste("working on common sex =", comm.sex[i]))
# here we calculate number of males and females in the pop
females <- round(comm.sex[i]*osr[j])
males <- comm.sex[i]
# here we calculate the total number of chromosomes
chroms <- males + 2 * females
k <- 1
# this sets up the tables that will hold a set of results
cur.result <- as.data.frame(matrix(NA,replicates, length(h)))
colnames(cur.result) <- c("h=0", "h=0.5", "h=1")
m <- 1
iter <- 1
# sets up the initial population
pop <- GetInitialPop(females, males)
source("functions.HD.R")
source("../functions/functions.HD.R")
# sets up the initial population
pop <- GetInitialPop(females, males)
# this flag and counter will allow us to break out of the
# while loop if an allele fixes or we have run as long
# as we want to allow it to run
segregating <- T
counter <- 1
# Script to plot allele frequencies for the sexually antagonistic locus when it is present on
# the Y chromosome - XY model.
library(ggplot2)
library(viridis)
resultsplot <- read.csv("../sex.bias/figures/XYmodel/Ychrom.rare.female.csv",as.is=T)
resultsplot <- read.csv("../XYmodel/Ychrom.rare.female.csv",as.is=T)
setwd("~/Desktop/Dropbox/projects/sex.bias/figures/XYmodel")
resultsplot <- read.csv("../XYmodel/Ychrom.rare.female.csv",as.is=T)
resultsplot <- resultsplot[(resultsplot$rd != 0.5),]
resultsplot <- resultsplot[(resultsplot$h != "h99"),]
resultsplot <- resultsplot[(resultsplot$s == "s0.5"),]
resultsplot <- resultsplot[(resultsplot$comm %in% c(500,100)),]
resultsplot <- resultsplot[(resultsplot$rd == .2), ]
p4 <- ggplot(resultsplot, aes(y=freq1, x=as.factor(comm))) +
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge",
alpha=0.5, trim=TRUE, scale="area") + facet_grid(h ~ s) + theme_light() +
theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="OSR")) + xlab("Common sex (males)") +
ylab("Allele frequency for the male beneficial allele") +
ggtitle("Allele frequency on the Y-chromosome") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
p4
ggplot(resultsplot, aes(y=freq1, x=as.factor(comm))) +
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge",
alpha=0.5, trim=TRUE, scale="area") + facet_grid(h ~ s) + theme_light() +
theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="OSR")) + xlab("Common sex (males)") +
ylab("Allele frequency for the male beneficial allele") +
ggtitle("Allele frequency on the Y-chromosome") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
geom_hline(yintercept = .5, linetype="dashed")
ggplot(resultsplot, aes(y=freq1, x=as.factor(comm))) +
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge",
alpha=0.5, trim=TRUE, scale="area") + facet_grid(h ~ s) + theme_light() +
theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="OSR")) + xlab("Common sex (males)") +
ylab("Allele frequency for the male beneficial allele") +
ggtitle("Allele frequency on the Y-chromosome") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
geom_hline(yintercept = .5, alpha=.5)
ggplot(resultsplot, aes(y=freq1, x=as.factor(comm)))  +
geom_hline(yintercept = .5, alpha=.5)+
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge",
alpha=0.5, trim=TRUE, scale="area") + facet_grid(h ~ s) + theme_light() +
theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="OSR")) + xlab("Common sex (males)") +
ylab("Allele frequency for the male beneficial allele") +
ggtitle("Allele frequency on the Y-chromosome") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
ggplot(resultsplot, aes(y=freq1, x=as.factor(comm)))  +
geom_hline(yintercept = .5, alpha=.5)+
geom_violin(aes(fill=as.factor(osr)), stat="ydensity", position="dodge",
alpha=0.75, trim=TRUE, scale="area") + facet_grid(h ~ s) + theme_light() +
theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="OSR")) + xlab("Common sex (males)") +
ylab("Allele frequency for the male beneficial allele") +
ggtitle("Allele frequency on the Y-chromosome") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
